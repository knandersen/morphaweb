{"mappings":"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","sources":["Dev/morphaweb/node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","Dev/morphaweb/node_modules/@parcel/runtime-js/lib/runtime-18d9ba3787d954ca.js","Dev/morphaweb/node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/webpack/universalModuleDefinition","Dev/morphaweb/node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/src/drawer.canvasentry.js","Dev/morphaweb/node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/src/drawer.js","Dev/morphaweb/node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/src/drawer.multicanvas.js","Dev/morphaweb/node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/src/mediaelement-webaudio.js","Dev/morphaweb/node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/src/mediaelement.js","Dev/morphaweb/node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/src/peakcache.js","Dev/morphaweb/node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/src/util/absMax.js","Dev/morphaweb/node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/src/util/fetch.js","Dev/morphaweb/node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/src/util/frame.js","Dev/morphaweb/node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/src/util/index.js","Dev/morphaweb/node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/src/util/max.js","Dev/morphaweb/node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/src/util/min.js","Dev/morphaweb/node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/src/util/observer.js","Dev/morphaweb/node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/src/util/orientation.js","Dev/morphaweb/node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/src/util/prevent-click.js","Dev/morphaweb/node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/src/util/request-animation-frame.js","Dev/morphaweb/node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/src/util/silence-mode.js","Dev/morphaweb/node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/src/wavesurfer.js","Dev/morphaweb/node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/src/webaudio.js","Dev/morphaweb/node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/node_modules/debounce/index.js","Dev/morphaweb/node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/webpack/bootstrap","Dev/morphaweb/node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/webpack/startup","Dev/morphaweb/node_modules/wavesurfer.js/src/plugin/markers/index.js","Dev/morphaweb/node_modules/@parcel/runtime-js/lib/runtime-945ee10bb13c24b1.js","Dev/morphaweb/src/index.js"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"i7Ab4\\\":\\\"index.7883efcf.js\\\",\\\"lxpIW\\\":\\\"walksign.53e13031.wav\\\"}\"));","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"WaveSurfer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WaveSurfer\"] = factory();\n\telse\n\t\troot[\"WaveSurfer\"] = factory();\n})(self, function() {\nreturn ","/**\n * @since 3.0.0\n */\n\nimport style from './util/style';\nimport getId from './util/get-id';\n\n/**\n * The `CanvasEntry` class represents an element consisting of a wave `canvas`\n * and an (optional) progress wave `canvas`.\n *\n * The `MultiCanvas` renderer uses one or more `CanvasEntry` instances to\n * render a waveform, depending on the zoom level.\n */\nexport default class CanvasEntry {\n    constructor() {\n        /**\n         * The wave node\n         *\n         * @type {HTMLCanvasElement}\n         */\n        this.wave = null;\n        /**\n         * The wave canvas rendering context\n         *\n         * @type {CanvasRenderingContext2D}\n         */\n        this.waveCtx = null;\n        /**\n         * The (optional) progress wave node\n         *\n         * @type {HTMLCanvasElement}\n         */\n        this.progress = null;\n        /**\n         * The (optional) progress wave canvas rendering context\n         *\n         * @type {CanvasRenderingContext2D}\n         */\n        this.progressCtx = null;\n        /**\n         * Start of the area the canvas should render, between 0 and 1\n         *\n         * @type {number}\n         */\n        this.start = 0;\n        /**\n         * End of the area the canvas should render, between 0 and 1\n         *\n         * @type {number}\n         */\n        this.end = 1;\n        /**\n         * Unique identifier for this entry\n         *\n         * @type {string}\n         */\n        this.id = getId(\n            typeof this.constructor.name !== 'undefined'\n                ? this.constructor.name.toLowerCase() + '_'\n                : 'canvasentry_'\n        );\n        /**\n         * Canvas 2d context attributes\n         *\n         * @type {object}\n         */\n        this.canvasContextAttributes = {};\n    }\n\n    /**\n     * Store the wave canvas element and create the 2D rendering context\n     *\n     * @param {HTMLCanvasElement} element The wave `canvas` element.\n     */\n    initWave(element) {\n        this.wave = element;\n        this.waveCtx = this.wave.getContext('2d', this.canvasContextAttributes);\n    }\n\n    /**\n     * Store the progress wave canvas element and create the 2D rendering\n     * context\n     *\n     * @param {HTMLCanvasElement} element The progress wave `canvas` element.\n     */\n    initProgress(element) {\n        this.progress = element;\n        this.progressCtx = this.progress.getContext(\n            '2d',\n            this.canvasContextAttributes\n        );\n    }\n\n    /**\n     * Update the dimensions\n     *\n     * @param {number} elementWidth Width of the entry\n     * @param {number} totalWidth Total width of the multi canvas renderer\n     * @param {number} width The new width of the element\n     * @param {number} height The new height of the element\n     */\n    updateDimensions(elementWidth, totalWidth, width, height) {\n        // where the canvas starts and ends in the waveform, represented as a\n        // decimal between 0 and 1\n        this.start = this.wave.offsetLeft / totalWidth || 0;\n        this.end = this.start + elementWidth / totalWidth;\n\n        // set wave canvas dimensions\n        this.wave.width = width;\n        this.wave.height = height;\n        let elementSize = { width: elementWidth + 'px' };\n        style(this.wave, elementSize);\n\n        if (this.hasProgressCanvas) {\n            // set progress canvas dimensions\n            this.progress.width = width;\n            this.progress.height = height;\n            style(this.progress, elementSize);\n        }\n    }\n\n    /**\n     * Clear the wave and progress rendering contexts\n     */\n    clearWave() {\n        // wave\n        this.waveCtx.clearRect(\n            0,\n            0,\n            this.waveCtx.canvas.width,\n            this.waveCtx.canvas.height\n        );\n\n        // progress\n        if (this.hasProgressCanvas) {\n            this.progressCtx.clearRect(\n                0,\n                0,\n                this.progressCtx.canvas.width,\n                this.progressCtx.canvas.height\n            );\n        }\n    }\n\n    /**\n     * Set the fill styles for wave and progress\n     *\n     * @param {string} waveColor Fill color for the wave canvas\n     * @param {?string} progressColor Fill color for the progress canvas\n     */\n    setFillStyles(waveColor, progressColor) {\n        this.waveCtx.fillStyle = waveColor;\n\n        if (this.hasProgressCanvas) {\n            this.progressCtx.fillStyle = progressColor;\n        }\n    }\n\n    /**\n     * Set the canvas transforms for wave and progress\n     *\n     * @param {boolean} vertical Whether to render vertically\n     */\n    applyCanvasTransforms(vertical) {\n        if (vertical) {\n            // Reflect the waveform across the line y = -x\n            this.waveCtx.setTransform(0, 1, 1, 0, 0, 0);\n\n            if (this.hasProgressCanvas) {\n                this.progressCtx.setTransform(0, 1, 1, 0, 0, 0);\n            }\n        }\n    }\n\n    /**\n     * Draw a rectangle for wave and progress\n     *\n     * @param {number} x X start position\n     * @param {number} y Y start position\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     */\n    fillRects(x, y, width, height, radius) {\n        this.fillRectToContext(this.waveCtx, x, y, width, height, radius);\n\n        if (this.hasProgressCanvas) {\n            this.fillRectToContext(\n                this.progressCtx,\n                x,\n                y,\n                width,\n                height,\n                radius\n            );\n        }\n    }\n\n    /**\n     * Draw the actual rectangle on a `canvas` element\n     *\n     * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\n     * @param {number} x X start position\n     * @param {number} y Y start position\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     */\n    fillRectToContext(ctx, x, y, width, height, radius) {\n        if (!ctx) {\n            return;\n        }\n\n        if (radius) {\n            this.drawRoundedRect(ctx, x, y, width, height, radius);\n        } else {\n            ctx.fillRect(x, y, width, height);\n        }\n    }\n\n    /**\n     * Draw a rounded rectangle on Canvas\n     *\n     * @param {CanvasRenderingContext2D} ctx Canvas context\n     * @param {number} x X-position of the rectangle\n     * @param {number} y Y-position of the rectangle\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     *\n     * @return {void}\n     * @example drawRoundedRect(ctx, 50, 50, 5, 10, 3)\n     */\n    drawRoundedRect(ctx, x, y, width, height, radius) {\n        if (height === 0) {\n            return;\n        }\n        // peaks are float values from -1 to 1. Use absolute height values in\n        // order to correctly calculate rounded rectangle coordinates\n        if (height < 0) {\n            height *= -1;\n            y -= height;\n        }\n        ctx.beginPath();\n        ctx.moveTo(x + radius, y);\n        ctx.lineTo(x + width - radius, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n        ctx.lineTo(x + width, y + height - radius);\n        ctx.quadraticCurveTo(\n            x + width,\n            y + height,\n            x + width - radius,\n            y + height\n        );\n        ctx.lineTo(x + radius, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n        ctx.lineTo(x, y + radius);\n        ctx.quadraticCurveTo(x, y, x + radius, y);\n        ctx.closePath();\n        ctx.fill();\n    }\n\n    /**\n     * Render the actual wave and progress lines\n     *\n     * @param {number[]} peaks Array with peaks data\n     * @param {number} absmax Maximum peak value (absolute)\n     * @param {number} halfH Half the height of the waveform\n     * @param {number} offsetY Offset to the top\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that\n     * should be rendered\n     */\n    drawLines(peaks, absmax, halfH, offsetY, start, end) {\n        this.drawLineToContext(\n            this.waveCtx,\n            peaks,\n            absmax,\n            halfH,\n            offsetY,\n            start,\n            end\n        );\n\n        if (this.hasProgressCanvas) {\n            this.drawLineToContext(\n                this.progressCtx,\n                peaks,\n                absmax,\n                halfH,\n                offsetY,\n                start,\n                end\n            );\n        }\n    }\n\n    /**\n     * Render the actual waveform line on a `canvas` element\n     *\n     * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\n     * @param {number[]} peaks Array with peaks data\n     * @param {number} absmax Maximum peak value (absolute)\n     * @param {number} halfH Half the height of the waveform\n     * @param {number} offsetY Offset to the top\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that\n     * should be rendered\n     */\n    drawLineToContext(ctx, peaks, absmax, halfH, offsetY, start, end) {\n        if (!ctx) {\n            return;\n        }\n\n        const length = peaks.length / 2;\n        const first = Math.round(length * this.start);\n\n        // use one more peak value to make sure we join peaks at ends -- unless,\n        // of course, this is the last canvas\n        const last = Math.round(length * this.end) + 1;\n\n        const canvasStart = first;\n        const canvasEnd = last;\n        const scale = this.wave.width / (canvasEnd - canvasStart - 1);\n\n        // optimization\n        const halfOffset = halfH + offsetY;\n        const absmaxHalf = absmax / halfH;\n\n        ctx.beginPath();\n        ctx.moveTo((canvasStart - first) * scale, halfOffset);\n\n        ctx.lineTo(\n            (canvasStart - first) * scale,\n            halfOffset - Math.round((peaks[2 * canvasStart] || 0) / absmaxHalf)\n        );\n\n        let i, peak, h;\n        for (i = canvasStart; i < canvasEnd; i++) {\n            peak = peaks[2 * i] || 0;\n            h = Math.round(peak / absmaxHalf);\n            ctx.lineTo((i - first) * scale + this.halfPixel, halfOffset - h);\n        }\n\n        // draw the bottom edge going backwards, to make a single\n        // closed hull to fill\n        let j = canvasEnd - 1;\n        for (j; j >= canvasStart; j--) {\n            peak = peaks[2 * j + 1] || 0;\n            h = Math.round(peak / absmaxHalf);\n            ctx.lineTo((j - first) * scale + this.halfPixel, halfOffset - h);\n        }\n\n        ctx.lineTo(\n            (canvasStart - first) * scale,\n            halfOffset -\n                Math.round((peaks[2 * canvasStart + 1] || 0) / absmaxHalf)\n        );\n\n        ctx.closePath();\n        ctx.fill();\n    }\n\n    /**\n     * Destroys this entry\n     */\n    destroy() {\n        this.waveCtx = null;\n        this.wave = null;\n\n        this.progressCtx = null;\n        this.progress = null;\n    }\n\n    /**\n     * Return image data of the wave `canvas` element\n     *\n     * When using a `type` of `'blob'`, this will return a `Promise` that\n     * resolves with a `Blob` instance.\n     *\n     * @param {string} format='image/png' An optional value of a format type.\n     * @param {number} quality=0.92 An optional value between 0 and 1.\n     * @param {string} type='dataURL' Either 'dataURL' or 'blob'.\n     * @return {string|Promise} When using the default `'dataURL'` `type` this\n     * returns a data URL. When using the `'blob'` `type` this returns a\n     * `Promise` that resolves with a `Blob` instance.\n     */\n    getImage(format, quality, type) {\n        if (type === 'blob') {\n            return new Promise(resolve => {\n                this.wave.toBlob(resolve, format, quality);\n            });\n        } else if (type === 'dataURL') {\n            return this.wave.toDataURL(format, quality);\n        }\n    }\n}\n","import * as util from './util';\n\n/**\n * Parent class for renderers\n *\n * @extends {Observer}\n */\nexport default class Drawer extends util.Observer {\n    /**\n     * @param {HTMLElement} container The container node of the wavesurfer instance\n     * @param {WavesurferParams} params The wavesurfer initialisation options\n     */\n    constructor(container, params) {\n        super();\n\n        this.container = util.withOrientation(container, params.vertical);\n        /**\n         * @type {WavesurferParams}\n         */\n        this.params = params;\n        /**\n         * The width of the renderer\n         * @type {number}\n         */\n        this.width = 0;\n        /**\n         * The height of the renderer\n         * @type {number}\n         */\n        this.height = params.height * this.params.pixelRatio;\n\n        this.lastPos = 0;\n        /**\n         * The `<wave>` element which is added to the container\n         * @type {HTMLElement}\n         */\n        this.wrapper = null;\n    }\n\n    /**\n     * Alias of `util.style`\n     *\n     * @param {HTMLElement} el The element that the styles will be applied to\n     * @param {Object} styles The map of propName: attribute, both are used as-is\n     * @return {HTMLElement} el\n     */\n    style(el, styles) {\n        return util.style(el, styles);\n    }\n\n    /**\n     * Create the wrapper `<wave>` element, style it and set up the events for\n     * interaction\n     */\n    createWrapper() {\n        this.wrapper = util.withOrientation(\n            this.container.appendChild(document.createElement('wave')),\n            this.params.vertical\n        );\n\n        this.style(this.wrapper, {\n            display: 'block',\n            position: 'relative',\n            userSelect: 'none',\n            webkitUserSelect: 'none',\n            height: this.params.height + 'px'\n        });\n\n        if (this.params.fillParent || this.params.scrollParent) {\n            this.style(this.wrapper, {\n                width: '100%',\n                overflowX: this.params.hideScrollbar ? 'hidden' : 'auto',\n                overflowY: 'hidden'\n            });\n        }\n\n        this.setupWrapperEvents();\n    }\n\n    /**\n     * Handle click event\n     *\n     * @param {Event} e Click event\n     * @param {?boolean} noPrevent Set to true to not call `e.preventDefault()`\n     * @return {number} Playback position from 0 to 1\n     */\n    handleEvent(e, noPrevent) {\n        !noPrevent && e.preventDefault();\n\n        const clientX = util.withOrientation(\n            e.targetTouches ? e.targetTouches[0] : e,\n            this.params.vertical\n        ).clientX;\n        const bbox = this.wrapper.getBoundingClientRect();\n\n        const nominalWidth = this.width;\n        const parentWidth = this.getWidth();\n        const progressPixels = this.getProgressPixels(bbox, clientX);\n\n        let progress;\n        if (!this.params.fillParent && nominalWidth < parentWidth) {\n            progress = progressPixels *\n                (this.params.pixelRatio / nominalWidth) || 0;\n        } else {\n            progress = (progressPixels + this.wrapper.scrollLeft) /\n                this.wrapper.scrollWidth || 0;\n        }\n\n        return util.clamp(progress, 0, 1);\n    }\n\n    getProgressPixels(wrapperBbox, clientX) {\n        if (this.params.rtl) {\n            return wrapperBbox.right - clientX;\n        } else {\n            return clientX - wrapperBbox.left;\n        }\n    }\n\n    setupWrapperEvents() {\n        this.wrapper.addEventListener('click', e => {\n            const orientedEvent = util.withOrientation(e, this.params.vertical);\n            const scrollbarHeight = this.wrapper.offsetHeight -\n                  this.wrapper.clientHeight;\n\n            if (scrollbarHeight !== 0) {\n                // scrollbar is visible.  Check if click was on it\n                const bbox = this.wrapper.getBoundingClientRect();\n                if (orientedEvent.clientY >= bbox.bottom - scrollbarHeight) {\n                    // ignore mousedown as it was on the scrollbar\n                    return;\n                }\n            }\n\n            if (this.params.interact) {\n                this.fireEvent('click', e, this.handleEvent(e));\n            }\n        });\n\n        this.wrapper.addEventListener('dblclick', e => {\n            if (this.params.interact) {\n                this.fireEvent('dblclick', e, this.handleEvent(e));\n            }\n        });\n\n        this.wrapper.addEventListener('scroll', e =>\n            this.fireEvent('scroll', e)\n        );\n    }\n\n    /**\n     * Draw peaks on the canvas\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n     * for split channel rendering\n     * @param {number} length The width of the area that should be drawn\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n    drawPeaks(peaks, length, start, end) {\n        if (!this.setWidth(length)) {\n            this.clearWave();\n        }\n\n        this.params.barWidth\n            ? this.drawBars(peaks, 0, start, end)\n            : this.drawWave(peaks, 0, start, end);\n    }\n\n    /**\n     * Scroll to the beginning\n     */\n    resetScroll() {\n        if (this.wrapper !== null) {\n            this.wrapper.scrollLeft = 0;\n        }\n    }\n\n    /**\n     * Recenter the view-port at a certain percent of the waveform\n     *\n     * @param {number} percent Value from 0 to 1 on the waveform\n     */\n    recenter(percent) {\n        const position = this.wrapper.scrollWidth * percent;\n        this.recenterOnPosition(position, true);\n    }\n\n    /**\n     * Recenter the view-port on a position, either scroll there immediately or\n     * in steps of 5 pixels\n     *\n     * @param {number} position X-offset in pixels\n     * @param {boolean} immediate Set to true to immediately scroll somewhere\n     */\n    recenterOnPosition(position, immediate) {\n        const scrollLeft = this.wrapper.scrollLeft;\n        const half = ~~(this.wrapper.clientWidth / 2);\n        const maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\n        let target = position - half;\n        let offset = target - scrollLeft;\n\n        if (maxScroll == 0) {\n            // no need to continue if scrollbar is not there\n            return;\n        }\n\n        // if the cursor is currently visible...\n        if (!immediate && -half <= offset && offset < half) {\n            // set rate at which waveform is centered\n            let rate = this.params.autoCenterRate;\n\n            // make rate depend on width of view and length of waveform\n            rate /= half;\n            rate *= maxScroll;\n\n            offset = Math.max(-rate, Math.min(rate, offset));\n            target = scrollLeft + offset;\n        }\n\n        // limit target to valid range (0 to maxScroll)\n        target = Math.max(0, Math.min(maxScroll, target));\n        // no use attempting to scroll if we're not moving\n        if (target != scrollLeft) {\n            this.wrapper.scrollLeft = target;\n        }\n    }\n\n    /**\n     * Get the current scroll position in pixels\n     *\n     * @return {number} Horizontal scroll position in pixels\n     */\n    getScrollX() {\n        let x = 0;\n        if (this.wrapper) {\n            const pixelRatio = this.params.pixelRatio;\n            x = Math.round(this.wrapper.scrollLeft * pixelRatio);\n\n            // In cases of elastic scroll (safari with mouse wheel) you can\n            // scroll beyond the limits of the container\n            // Calculate and floor the scrollable extent to make sure an out\n            // of bounds value is not returned\n            // Ticket #1312\n            if (this.params.scrollParent) {\n                const maxScroll = ~~(\n                    this.wrapper.scrollWidth * pixelRatio -\n                    this.getWidth()\n                );\n                x = Math.min(maxScroll, Math.max(0, x));\n            }\n        }\n        return x;\n    }\n\n    /**\n     * Get the width of the container\n     *\n     * @return {number} The width of the container\n     */\n    getWidth() {\n        return Math.round(this.container.clientWidth * this.params.pixelRatio);\n    }\n\n    /**\n     * Set the width of the container\n     *\n     * @param {number} width The new width of the container\n     * @return {boolean} Whether the width of the container was updated or not\n     */\n    setWidth(width) {\n        if (this.width == width) {\n            return false;\n        }\n\n        this.width = width;\n\n        if (this.params.fillParent || this.params.scrollParent) {\n            this.style(this.wrapper, {\n                width: ''\n            });\n        } else {\n            const newWidth = ~~(this.width / this.params.pixelRatio) + 'px';\n            this.style(this.wrapper, {\n                width: newWidth\n            });\n        }\n\n        this.updateSize();\n        return true;\n    }\n\n    /**\n     * Set the height of the container\n     *\n     * @param {number} height The new height of the container.\n     * @return {boolean} Whether the height of the container was updated or not\n     */\n    setHeight(height) {\n        if (height == this.height) {\n            return false;\n        }\n        this.height = height;\n\n        this.style(this.wrapper, {\n            height: ~~(this.height / this.params.pixelRatio) + 'px'\n        });\n\n        this.updateSize();\n        return true;\n    }\n\n    /**\n     * Called by wavesurfer when progress should be rendered\n     *\n     * @param {number} progress From 0 to 1\n     */\n    progress(progress) {\n        const minPxDelta = 1 / this.params.pixelRatio;\n        const pos = Math.round(progress * this.width) * minPxDelta;\n\n        if (pos < this.lastPos || pos - this.lastPos >= minPxDelta) {\n            this.lastPos = pos;\n\n            if (this.params.scrollParent && this.params.autoCenter) {\n                const newPos = ~~(this.wrapper.scrollWidth * progress);\n                this.recenterOnPosition(\n                    newPos,\n                    this.params.autoCenterImmediately\n                );\n            }\n\n            this.updateProgress(pos);\n        }\n    }\n\n    /**\n     * This is called when wavesurfer is destroyed\n     */\n    destroy() {\n        this.unAll();\n        if (this.wrapper) {\n            if (this.wrapper.parentNode == this.container.domElement) {\n                this.container.removeChild(this.wrapper.domElement);\n            }\n            this.wrapper = null;\n        }\n    }\n\n    /* Renderer-specific methods */\n\n    /**\n     * Called after cursor related params have changed.\n     *\n     * @abstract\n     */\n    updateCursor() {}\n\n    /**\n     * Called when the size of the container changes so the renderer can adjust\n     *\n     * @abstract\n     */\n    updateSize() {}\n\n    /**\n     * Draw a waveform with bars\n     *\n     * @abstract\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for split channel\n     * rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n    drawBars(peaks, channelIndex, start, end) {}\n\n    /**\n     * Draw a waveform\n     *\n     * @abstract\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for split channel\n     * rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n    drawWave(peaks, channelIndex, start, end) {}\n\n    /**\n     * Clear the waveform\n     *\n     * @abstract\n     */\n    clearWave() {}\n\n    /**\n     * Render the new progress\n     *\n     * @abstract\n     * @param {number} position X-Offset of progress position in pixels\n     */\n    updateProgress(position) {}\n}\n","import Drawer from './drawer';\nimport * as util from './util';\nimport CanvasEntry from './drawer.canvasentry';\n\n/**\n * MultiCanvas renderer for wavesurfer. Is currently the default and sole\n * builtin renderer.\n *\n * A `MultiCanvas` consists of one or more `CanvasEntry` instances, depending\n * on the zoom level.\n */\nexport default class MultiCanvas extends Drawer {\n    /**\n     * @param {HTMLElement} container The container node of the wavesurfer instance\n     * @param {WavesurferParams} params The wavesurfer initialisation options\n     */\n    constructor(container, params) {\n        super(container, params);\n\n        /**\n         * @type {number}\n         */\n        this.maxCanvasWidth = params.maxCanvasWidth;\n\n        /**\n         * @type {number}\n         */\n        this.maxCanvasElementWidth = Math.round(\n            params.maxCanvasWidth / params.pixelRatio\n        );\n\n        /**\n         * Whether or not the progress wave is rendered. If the `waveColor`\n         * and `progressColor` are the same color it is not.\n         *\n         * @type {boolean}\n         */\n        this.hasProgressCanvas = params.waveColor != params.progressColor;\n\n        /**\n         * @type {number}\n         */\n        this.halfPixel = 0.5 / params.pixelRatio;\n\n        /**\n         * List of `CanvasEntry` instances.\n         *\n         * @type {Array}\n         */\n        this.canvases = [];\n\n        /**\n         * @type {HTMLElement}\n         */\n        this.progressWave = null;\n\n        /**\n         * Class used to generate entries.\n         *\n         * @type {function}\n         */\n        this.EntryClass = CanvasEntry;\n\n        /**\n         * Canvas 2d context attributes.\n         *\n         * @type {object}\n         */\n        this.canvasContextAttributes = params.drawingContextAttributes;\n\n        /**\n         * Overlap added between entries to prevent vertical white stripes\n         * between `canvas` elements.\n         *\n         * @type {number}\n         */\n        this.overlap = 2 * Math.ceil(params.pixelRatio / 2);\n\n        /**\n         * The radius of the wave bars. Makes bars rounded\n         *\n         * @type {number}\n         */\n        this.barRadius = params.barRadius || 0;\n\n        /**\n         * Whether to render the waveform vertically. Defaults to false.\n         *\n         * @type {boolean}\n         */\n        this.vertical = params.vertical;\n    }\n\n    /**\n     * Initialize the drawer\n     */\n    init() {\n        this.createWrapper();\n        this.createElements();\n    }\n\n    /**\n     * Create the canvas elements and style them\n     *\n     */\n    createElements() {\n        this.progressWave = util.withOrientation(\n            this.wrapper.appendChild(document.createElement('wave')),\n            this.params.vertical\n        );\n        this.style(this.progressWave, {\n            position: 'absolute',\n            zIndex: 3,\n            left: 0,\n            top: 0,\n            bottom: 0,\n            overflow: 'hidden',\n            width: '0',\n            display: 'none',\n            boxSizing: 'border-box',\n            borderRightStyle: 'solid',\n            pointerEvents: 'none'\n        });\n\n        this.addCanvas();\n        this.updateCursor();\n    }\n\n    /**\n     * Update cursor style\n     */\n    updateCursor() {\n        this.style(this.progressWave, {\n            borderRightWidth: this.params.cursorWidth + 'px',\n            borderRightColor: this.params.cursorColor\n        });\n    }\n\n    /**\n     * Adjust to the updated size by adding or removing canvases\n     */\n    updateSize() {\n        const totalWidth = Math.round(this.width / this.params.pixelRatio);\n        const requiredCanvases = Math.ceil(\n            totalWidth / (this.maxCanvasElementWidth + this.overlap)\n        );\n\n        // add required canvases\n        while (this.canvases.length < requiredCanvases) {\n            this.addCanvas();\n        }\n\n        // remove older existing canvases, if any\n        while (this.canvases.length > requiredCanvases) {\n            this.removeCanvas();\n        }\n\n        let canvasWidth = this.maxCanvasWidth + this.overlap;\n        const lastCanvas = this.canvases.length - 1;\n        this.canvases.forEach((entry, i) => {\n            if (i == lastCanvas) {\n                canvasWidth = this.width - this.maxCanvasWidth * lastCanvas;\n            }\n            this.updateDimensions(entry, canvasWidth, this.height);\n\n            entry.clearWave();\n        });\n    }\n\n    /**\n     * Add a canvas to the canvas list\n     *\n     */\n    addCanvas() {\n        const entry = new this.EntryClass();\n        entry.canvasContextAttributes = this.canvasContextAttributes;\n        entry.hasProgressCanvas = this.hasProgressCanvas;\n        entry.halfPixel = this.halfPixel;\n        const leftOffset = this.maxCanvasElementWidth * this.canvases.length;\n\n        // wave\n        let wave = util.withOrientation(\n            this.wrapper.appendChild(document.createElement('canvas')),\n            this.params.vertical\n        );\n        this.style(wave, {\n            position: 'absolute',\n            zIndex: 2,\n            left: leftOffset + 'px',\n            top: 0,\n            bottom: 0,\n            height: '100%',\n            pointerEvents: 'none'\n        });\n        entry.initWave(wave);\n\n        // progress\n        if (this.hasProgressCanvas) {\n            let progress = util.withOrientation(\n                this.progressWave.appendChild(document.createElement('canvas')),\n                this.params.vertical\n            );\n            this.style(progress, {\n                position: 'absolute',\n                left: leftOffset + 'px',\n                top: 0,\n                bottom: 0,\n                height: '100%'\n            });\n            entry.initProgress(progress);\n        }\n\n        this.canvases.push(entry);\n    }\n\n    /**\n     * Pop single canvas from the list\n     *\n     */\n    removeCanvas() {\n        let lastEntry = this.canvases[this.canvases.length - 1];\n\n        // wave\n        lastEntry.wave.parentElement.removeChild(lastEntry.wave.domElement);\n\n        // progress\n        if (this.hasProgressCanvas) {\n            lastEntry.progress.parentElement.removeChild(lastEntry.progress.domElement);\n        }\n\n        // cleanup\n        if (lastEntry) {\n            lastEntry.destroy();\n            lastEntry = null;\n        }\n\n        this.canvases.pop();\n    }\n\n    /**\n     * Update the dimensions of a canvas element\n     *\n     * @param {CanvasEntry} entry Target entry\n     * @param {number} width The new width of the element\n     * @param {number} height The new height of the element\n     */\n    updateDimensions(entry, width, height) {\n        const elementWidth = Math.round(width / this.params.pixelRatio);\n        const totalWidth = Math.round(this.width / this.params.pixelRatio);\n\n        // update canvas dimensions\n        entry.updateDimensions(elementWidth, totalWidth, width, height);\n\n        // style element\n        this.style(this.progressWave, { display: 'block' });\n    }\n\n    /**\n     * Clear the whole multi-canvas\n     */\n    clearWave() {\n        util.frame(() => {\n            this.canvases.forEach(entry => entry.clearWave());\n        })();\n    }\n\n    /**\n     * Draw a waveform with bars\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n     * for split channel rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0. Must be an integer.\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     * @returns {void}\n     */\n    drawBars(peaks, channelIndex, start, end) {\n        return this.prepareDraw(\n            peaks,\n            channelIndex,\n            start,\n            end,\n            ({ absmax, hasMinVals, height, offsetY, halfH, peaks, channelIndex: ch }) => {\n                // if drawBars was called within ws.empty we don't pass a start and\n                // don't want anything to happen\n                if (start === undefined) {\n                    return;\n                }\n                // Skip every other value if there are negatives.\n                const peakIndexScale = hasMinVals ? 2 : 1;\n                const length = peaks.length / peakIndexScale;\n                const bar = this.params.barWidth * this.params.pixelRatio;\n                const gap =\n                    this.params.barGap === null\n                        ? Math.max(this.params.pixelRatio, ~~(bar / 2))\n                        : Math.max(\n                            this.params.pixelRatio,\n                            this.params.barGap * this.params.pixelRatio\n                        );\n                const step = bar + gap;\n\n                const scale = length / this.width;\n                const first = start;\n                const last = end;\n                let i = first;\n\n                for (i; i < last; i += step) {\n                    const peak =\n                        peaks[Math.floor(i * scale * peakIndexScale)] || 0;\n                    let h = Math.round((peak / absmax) * halfH);\n\n                    /* in case of silences, allow the user to specify that we\n                     * always draw *something* (normally a 1px high bar) */\n                    if (h == 0 && this.params.barMinHeight) {\n                        h = this.params.barMinHeight;\n                    }\n\n                    this.fillRect(\n                        i + this.halfPixel,\n                        halfH - h + offsetY,\n                        bar + this.halfPixel,\n                        h * 2,\n                        this.barRadius,\n                        ch\n                    );\n                }\n            }\n        );\n    }\n\n    /**\n     * Draw a waveform\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n     * for split channel rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number?} start The x-offset of the beginning of the area that\n     * should be rendered (If this isn't set only a flat line is rendered)\n     * @param {number?} end The x-offset of the end of the area that should be\n     * rendered\n     * @returns {void}\n     */\n    drawWave(peaks, channelIndex, start, end) {\n        return this.prepareDraw(\n            peaks,\n            channelIndex,\n            start,\n            end,\n            ({ absmax, hasMinVals, height, offsetY, halfH, peaks, channelIndex }) => {\n                if (!hasMinVals) {\n                    const reflectedPeaks = [];\n                    const len = peaks.length;\n                    let i = 0;\n                    for (i; i < len; i++) {\n                        reflectedPeaks[2 * i] = peaks[i];\n                        reflectedPeaks[2 * i + 1] = -peaks[i];\n                    }\n                    peaks = reflectedPeaks;\n                }\n\n                // if drawWave was called within ws.empty we don't pass a start and\n                // end and simply want a flat line\n                if (start !== undefined) {\n                    this.drawLine(peaks, absmax, halfH, offsetY, start, end, channelIndex);\n                }\n\n                // always draw a median line\n                this.fillRect(\n                    0,\n                    halfH + offsetY - this.halfPixel,\n                    this.width,\n                    this.halfPixel,\n                    this.barRadius,\n                    channelIndex\n                );\n            }\n        );\n    }\n\n    /**\n     * Tell the canvas entries to render their portion of the waveform\n     *\n     * @param {number[]} peaks Peaks data\n     * @param {number} absmax Maximum peak value (absolute)\n     * @param {number} halfH Half the height of the waveform\n     * @param {number} offsetY Offset to the top\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that\n     * should be rendered\n     * @param {channelIndex} channelIndex The channel index of the line drawn\n     */\n    drawLine(peaks, absmax, halfH, offsetY, start, end, channelIndex) {\n        const { waveColor, progressColor } = this.params.splitChannelsOptions.channelColors[channelIndex] || {};\n        this.canvases.forEach((entry, i) => {\n            this.setFillStyles(entry, waveColor, progressColor);\n            this.applyCanvasTransforms(entry, this.params.vertical);\n            entry.drawLines(peaks, absmax, halfH, offsetY, start, end);\n        });\n    }\n\n    /**\n     * Draw a rectangle on the multi-canvas\n     *\n     * @param {number} x X-position of the rectangle\n     * @param {number} y Y-position of the rectangle\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     * @param {channelIndex} channelIndex The channel index of the bar drawn\n     */\n    fillRect(x, y, width, height, radius, channelIndex) {\n        const startCanvas = Math.floor(x / this.maxCanvasWidth);\n        const endCanvas = Math.min(\n            Math.ceil((x + width) / this.maxCanvasWidth) + 1,\n            this.canvases.length\n        );\n        let i = startCanvas;\n        for (i; i < endCanvas; i++) {\n            const entry = this.canvases[i];\n            const leftOffset = i * this.maxCanvasWidth;\n\n            const intersection = {\n                x1: Math.max(x, i * this.maxCanvasWidth),\n                y1: y,\n                x2: Math.min(\n                    x + width,\n                    i * this.maxCanvasWidth + entry.wave.width\n                ),\n                y2: y + height\n            };\n\n            if (intersection.x1 < intersection.x2) {\n                const { waveColor, progressColor } = this.params.splitChannelsOptions.channelColors[channelIndex] || {};\n                this.setFillStyles(entry, waveColor, progressColor);\n                this.applyCanvasTransforms(entry, this.params.vertical);\n\n                entry.fillRects(\n                    intersection.x1 - leftOffset,\n                    intersection.y1,\n                    intersection.x2 - intersection.x1,\n                    intersection.y2 - intersection.y1,\n                    radius\n                );\n            }\n        }\n    }\n\n    /**\n     * Returns whether to hide the channel from being drawn based on params.\n     *\n     * @param {number} channelIndex The index of the current channel.\n     * @returns {bool} True to hide the channel, false to draw.\n     */\n    hideChannel(channelIndex) {\n        return this.params.splitChannels && this.params.splitChannelsOptions.filterChannels.includes(channelIndex);\n    }\n\n    /**\n     * Performs preparation tasks and calculations which are shared by `drawBars`\n     * and `drawWave`\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for\n     * split channel rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number?} start The x-offset of the beginning of the area that\n     * should be rendered. If this isn't set only a flat line is rendered\n     * @param {number?} end The x-offset of the end of the area that should be\n     * rendered\n     * @param {function} fn The render function to call, e.g. `drawWave`\n     * @param {number} drawIndex The index of the current channel after filtering.\n     * @param {number?} normalizedMax Maximum modulation value across channels for use with relativeNormalization. Ignored when undefined\n     * @returns {void}\n     */\n    prepareDraw(peaks, channelIndex, start, end, fn, drawIndex, normalizedMax) {\n        return util.frame(() => {\n            // Split channels and call this function with the channelIndex set\n            if (peaks[0] instanceof Array) {\n                const channels = peaks;\n\n                if (this.params.splitChannels) {\n                    const filteredChannels = channels.filter((c, i) => !this.hideChannel(i));\n                    if (!this.params.splitChannelsOptions.overlay) {\n                        this.setHeight(\n                            Math.max(filteredChannels.length, 1) *\n                                this.params.height *\n                                this.params.pixelRatio\n                        );\n                    }\n\n                    let overallAbsMax;\n                    if (this.params.splitChannelsOptions && this.params.splitChannelsOptions.relativeNormalization) {\n                        // calculate maximum peak across channels to use for normalization\n                        overallAbsMax = util.max(channels.map((channelPeaks => util.absMax(channelPeaks))));\n                    }\n\n\n                    return channels.forEach((channelPeaks, i) =>\n                        this.prepareDraw(channelPeaks, i, start, end, fn, filteredChannels.indexOf(channelPeaks), overallAbsMax)\n                    );\n                }\n                peaks = channels[0];\n            }\n\n            // Return and do not draw channel peaks if hidden.\n            if (this.hideChannel(channelIndex)) {\n                return;\n            }\n\n            // calculate maximum modulation value, either from the barHeight\n            // parameter or if normalize=true from the largest value in the peak\n            // set\n            let absmax = 1 / this.params.barHeight;\n            if (this.params.normalize) {\n                absmax = normalizedMax === undefined ? util.absMax(peaks) : normalizedMax;\n            }\n\n            // Bar wave draws the bottom only as a reflection of the top,\n            // so we don't need negative values\n            const hasMinVals = [].some.call(peaks, val => val < 0);\n            const height = this.params.height * this.params.pixelRatio;\n            const halfH = height / 2;\n\n            let offsetY = height * drawIndex || 0;\n\n            // Override offsetY if overlay is true\n            if (this.params.splitChannelsOptions && this.params.splitChannelsOptions.overlay) {\n                offsetY = 0;\n            }\n\n            return fn({\n                absmax: absmax,\n                hasMinVals: hasMinVals,\n                height: height,\n                offsetY: offsetY,\n                halfH: halfH,\n                peaks: peaks,\n                channelIndex: channelIndex\n            });\n        })();\n    }\n\n    /**\n     * Set the fill styles for a certain entry (wave and progress)\n     *\n     * @param {CanvasEntry} entry Target entry\n     * @param {string} waveColor Wave color to draw this entry\n     * @param {string} progressColor Progress color to draw this entry\n     */\n    setFillStyles(entry, waveColor = this.params.waveColor, progressColor = this.params.progressColor) {\n        entry.setFillStyles(waveColor, progressColor);\n    }\n\n    /**\n     * Set the canvas transforms for a certain entry (wave and progress)\n     *\n     * @param {CanvasEntry} entry Target entry\n     * @param {boolean} vertical Whether to render the waveform vertically\n     */\n    applyCanvasTransforms(entry, vertical = false) {\n        entry.applyCanvasTransforms(vertical);\n    }\n\n    /**\n     * Return image data of the multi-canvas\n     *\n     * When using a `type` of `'blob'`, this will return a `Promise`.\n     *\n     * @param {string} format='image/png' An optional value of a format type.\n     * @param {number} quality=0.92 An optional value between 0 and 1.\n     * @param {string} type='dataURL' Either 'dataURL' or 'blob'.\n     * @return {string|string[]|Promise} When using the default `'dataURL'`\n     * `type` this returns a single data URL or an array of data URLs,\n     * one for each canvas. When using the `'blob'` `type` this returns a\n     * `Promise` that resolves with an array of `Blob` instances, one for each\n     * canvas.\n     */\n    getImage(format, quality, type) {\n        if (type === 'blob') {\n            return Promise.all(\n                this.canvases.map(entry => {\n                    return entry.getImage(format, quality, type);\n                })\n            );\n        } else if (type === 'dataURL') {\n            let images = this.canvases.map(entry =>\n                entry.getImage(format, quality, type)\n            );\n            return images.length > 1 ? images : images[0];\n        }\n    }\n\n    /**\n     * Render the new progress\n     *\n     * @param {number} position X-offset of progress position in pixels\n     */\n    updateProgress(position) {\n        this.style(this.progressWave, { width: position + 'px' });\n    }\n}\n","import MediaElement from './mediaelement';\n\n/**\n * MediaElementWebAudio backend: load audio via an HTML5 audio tag, but playback with the WebAudio API.\n * The advantage here is that the html5 <audio> tag can perform range requests on the server and not\n * buffer the entire file in one request, and you still get the filtering and scripting functionality\n * of the webaudio API.\n * Note that in order to use range requests and prevent buffering, you must provide peak data.\n *\n * @since 3.2.0\n */\nexport default class MediaElementWebAudio extends MediaElement {\n    /**\n     * Construct the backend\n     *\n     * @param {WavesurferParams} params Wavesurfer parameters\n     */\n    constructor(params) {\n        super(params);\n        /** @private */\n        this.params = params;\n        /** @private */\n        this.sourceMediaElement = null;\n    }\n\n    /**\n     * Initialise the backend, called in `wavesurfer.createBackend()`\n     */\n    init() {\n        this.setPlaybackRate(this.params.audioRate);\n        this.createTimer();\n        this.createVolumeNode();\n        this.createScriptNode();\n        this.createAnalyserNode();\n    }\n    /**\n     * Private method called by both `load` (from url)\n     * and `loadElt` (existing media element) methods.\n     *\n     * @param {HTMLMediaElement} media HTML5 Audio or Video element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     * @param {string} preload HTML 5 preload attribute value\n     * @private\n     */\n    _load(media, peaks, preload) {\n        super._load(media, peaks, preload);\n        this.createMediaElementSource(media);\n    }\n\n    /**\n     * Create MediaElementSource node\n     *\n     * @since 3.2.0\n     * @param {HTMLMediaElement} mediaElement HTML5 Audio to load\n     */\n    createMediaElementSource(mediaElement) {\n        this.sourceMediaElement = this.ac.createMediaElementSource(\n            mediaElement\n        );\n        this.sourceMediaElement.connect(this.analyser);\n    }\n\n    play(start, end) {\n        this.resumeAudioContext();\n        return super.play(start, end);\n    }\n\n    /**\n     * This is called when wavesurfer is destroyed\n     *\n     */\n    destroy() {\n        super.destroy();\n\n        this.destroyWebAudio();\n    }\n}\n","import WebAudio from './webaudio';\nimport * as util from './util';\n\n/**\n * MediaElement backend\n */\nexport default class MediaElement extends WebAudio {\n    /**\n     * Construct the backend\n     *\n     * @param {WavesurferParams} params Wavesurfer parameters\n     */\n    constructor(params) {\n        super(params);\n        /** @private */\n        this.params = params;\n\n        /**\n         * Initially a dummy media element to catch errors. Once `_load` is\n         * called, this will contain the actual `HTMLMediaElement`.\n         * @private\n         */\n        this.media = {\n            currentTime: 0,\n            duration: 0,\n            paused: true,\n            playbackRate: 1,\n            play() {},\n            pause() {},\n            volume: 0\n        };\n\n        /** @private */\n        this.mediaType = params.mediaType.toLowerCase();\n        /** @private */\n        this.elementPosition = params.elementPosition;\n        /** @private */\n        this.peaks = null;\n        /** @private */\n        this.playbackRate = 1;\n        /** @private */\n        this.volume = 1;\n        /** @private */\n        this.isMuted = false;\n        /** @private */\n        this.buffer = null;\n        /** @private */\n        this.onPlayEnd = null;\n        /** @private */\n        this.mediaListeners = {};\n    }\n\n    /**\n     * Initialise the backend, called in `wavesurfer.createBackend()`\n     */\n    init() {\n        this.setPlaybackRate(this.params.audioRate);\n        this.createTimer();\n    }\n\n    /**\n     * Attach event listeners to media element.\n     */\n    _setupMediaListeners() {\n        this.mediaListeners.error = () => {\n            this.fireEvent('error', 'Error loading media element');\n        };\n        this.mediaListeners.canplay = () => {\n            this.fireEvent('canplay');\n        };\n        this.mediaListeners.ended = () => {\n            this.fireEvent('finish');\n        };\n        // listen to and relay play, pause and seeked events to enable\n        // playback control from the external media element\n        this.mediaListeners.play = () => {\n            this.fireEvent('play');\n        };\n        this.mediaListeners.pause = () => {\n            this.fireEvent('pause');\n        };\n        this.mediaListeners.seeked = event => {\n            this.fireEvent('seek');\n        };\n        this.mediaListeners.volumechange = event => {\n            this.isMuted = this.media.muted;\n            if (this.isMuted) {\n                this.volume = 0;\n            } else {\n                this.volume = this.media.volume;\n            }\n            this.fireEvent('volume');\n        };\n\n        // reset event listeners\n        Object.keys(this.mediaListeners).forEach(id => {\n            this.media.removeEventListener(id, this.mediaListeners[id]);\n            this.media.addEventListener(id, this.mediaListeners[id]);\n        });\n    }\n\n    /**\n     * Create a timer to provide a more precise `audioprocess` event.\n     */\n    createTimer() {\n        const onAudioProcess = () => {\n            if (this.isPaused()) {\n                return;\n            }\n            this.fireEvent('audioprocess', this.getCurrentTime());\n\n            // Call again in the next frame\n            util.frame(onAudioProcess)();\n        };\n\n        this.on('play', onAudioProcess);\n\n        // Update the progress one more time to prevent it from being stuck in\n        // case of lower framerates\n        this.on('pause', () => {\n            this.fireEvent('audioprocess', this.getCurrentTime());\n        });\n    }\n\n    /**\n     * Create media element with url as its source,\n     * and append to container element.\n     *\n     * @param {string} url Path to media file\n     * @param {HTMLElement} container HTML element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     * @param {string} preload HTML 5 preload attribute value\n     * @throws Will throw an error if the `url` argument is not a valid media\n     * element.\n     */\n    load(url, container, peaks, preload) {\n        const media = document.createElement(this.mediaType);\n        media.controls = this.params.mediaControls;\n        media.autoplay = this.params.autoplay || false;\n        media.preload = preload == null ? 'auto' : preload;\n        media.src = url;\n        media.style.width = '100%';\n\n        const prevMedia = container.querySelector(this.mediaType);\n        if (prevMedia) {\n            container.removeChild(prevMedia);\n        }\n        container.appendChild(media);\n\n        this._load(media, peaks, preload);\n    }\n\n    /**\n     * Load existing media element.\n     *\n     * @param {HTMLMediaElement} elt HTML5 Audio or Video element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     */\n    loadElt(elt, peaks) {\n        elt.controls = this.params.mediaControls;\n        elt.autoplay = this.params.autoplay || false;\n\n        this._load(elt, peaks, elt.preload);\n    }\n\n    /**\n     * Method called by both `load` (from url)\n     * and `loadElt` (existing media element) methods.\n     *\n     * @param {HTMLMediaElement} media HTML5 Audio or Video element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     * @param {string} preload HTML 5 preload attribute value\n     * @throws Will throw an error if the `media` argument is not a valid media\n     * element.\n     * @private\n     */\n    _load(media, peaks, preload) {\n        // verify media element is valid\n        if (\n            !(media instanceof HTMLMediaElement) ||\n            typeof media.addEventListener === 'undefined'\n        ) {\n            throw new Error('media parameter is not a valid media element');\n        }\n\n        // load must be called manually on iOS, otherwise peaks won't draw\n        // until a user interaction triggers load --> 'ready' event\n        //\n        // note that we avoid calling media.load here when given peaks and preload == 'none'\n        // as this almost always triggers some browser fetch of the media.\n        if (typeof media.load == 'function' && !(peaks && preload == 'none')) {\n            // Resets the media element and restarts the media resource. Any\n            // pending events are discarded. How much media data is fetched is\n            // still affected by the preload attribute.\n            media.load();\n        }\n\n        this.media = media;\n        this._setupMediaListeners();\n        this.peaks = peaks;\n        this.onPlayEnd = null;\n        this.buffer = null;\n        this.isMuted = media.muted;\n        this.setPlaybackRate(this.playbackRate);\n        this.setVolume(this.volume);\n    }\n\n    /**\n     * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\n     *\n     * @return {boolean} Media paused or not\n     */\n    isPaused() {\n        return !this.media || this.media.paused;\n    }\n\n    /**\n     * Used by `wavesurfer.getDuration()`\n     *\n     * @return {number} Duration\n     */\n    getDuration() {\n        if (this.explicitDuration) {\n            return this.explicitDuration;\n        }\n        let duration = (this.buffer || this.media).duration;\n        if (duration >= Infinity) {\n            // streaming audio\n            duration = this.media.seekable.end(0);\n        }\n        return duration;\n    }\n\n    /**\n     * Returns the current time in seconds relative to the audio-clip's\n     * duration.\n     *\n     * @return {number} Current time\n     */\n    getCurrentTime() {\n        return this.media && this.media.currentTime;\n    }\n\n    /**\n     * Get the position from 0 to 1\n     *\n     * @return {number} Current position\n     */\n    getPlayedPercents() {\n        return this.getCurrentTime() / this.getDuration() || 0;\n    }\n\n    /**\n     * Get the audio source playback rate.\n     *\n     * @return {number} Playback rate\n     */\n    getPlaybackRate() {\n        return this.playbackRate || this.media.playbackRate;\n    }\n\n    /**\n     * Set the audio source playback rate.\n     *\n     * @param {number} value Playback rate\n     */\n    setPlaybackRate(value) {\n        this.playbackRate = value || 1;\n        this.media.playbackRate = this.playbackRate;\n    }\n\n    /**\n     * Used by `wavesurfer.seekTo()`\n     *\n     * @param {number} start Position to start at in seconds\n     */\n    seekTo(start) {\n        if (start != null) {\n            this.media.currentTime = start;\n        }\n        this.clearPlayEnd();\n    }\n\n    /**\n     * Plays the loaded audio region.\n     *\n     * @param {number} start Start offset in seconds, relative to the beginning\n     * of a clip.\n     * @param {number} end When to stop, relative to the beginning of a clip.\n     * @emits MediaElement#play\n     * @return {Promise} Result\n     */\n    play(start, end) {\n        this.seekTo(start);\n        const promise = this.media.play();\n        end && this.setPlayEnd(end);\n\n        return promise;\n    }\n\n    /**\n     * Pauses the loaded audio.\n     *\n     * @emits MediaElement#pause\n     * @return {Promise} Result\n     */\n    pause() {\n        let promise;\n\n        if (this.media) {\n            promise = this.media.pause();\n        }\n        this.clearPlayEnd();\n\n        return promise;\n    }\n\n    /**\n     * Set the play end\n     *\n     * @param {number} end Where to end\n     */\n    setPlayEnd(end) {\n        this.clearPlayEnd();\n\n        this._onPlayEnd = time => {\n            if (time >= end) {\n                this.pause();\n                this.seekTo(end);\n            }\n        };\n        this.on('audioprocess', this._onPlayEnd);\n    }\n\n    /** @private */\n    clearPlayEnd() {\n        if (this._onPlayEnd) {\n            this.un('audioprocess', this._onPlayEnd);\n            this._onPlayEnd = null;\n        }\n    }\n\n    /**\n     * Compute the max and min value of the waveform when broken into\n     * <length> subranges.\n     *\n     * @param {number} length How many subranges to break the waveform into.\n     * @param {number} first First sample in the required range.\n     * @param {number} last Last sample in the required range.\n     * @return {number[]|Number.<Array[]>} Array of 2*<length> peaks or array of\n     * arrays of peaks consisting of (max, min) values for each subrange.\n     */\n    getPeaks(length, first, last) {\n        if (this.buffer) {\n            return super.getPeaks(length, first, last);\n        }\n        return this.peaks || [];\n    }\n\n    /**\n     * Set the sink id for the media player\n     *\n     * @param {string} deviceId String value representing audio device id.\n     * @returns {Promise} A Promise that resolves to `undefined` when there\n     * are no errors.\n     */\n    setSinkId(deviceId) {\n        if (deviceId) {\n            if (!this.media.setSinkId) {\n                return Promise.reject(\n                    new Error('setSinkId is not supported in your browser')\n                );\n            }\n            return this.media.setSinkId(deviceId);\n        }\n\n        return Promise.reject(new Error('Invalid deviceId: ' + deviceId));\n    }\n\n    /**\n     * Get the current volume\n     *\n     * @return {number} value A floating point value between 0 and 1.\n     */\n    getVolume() {\n        return this.volume;\n    }\n\n    /**\n     * Set the audio volume\n     *\n     * @param {number} value A floating point value between 0 and 1.\n     */\n    setVolume(value) {\n        this.volume = value;\n        // no need to change when it's already at that volume\n        if (this.media.volume !== this.volume) {\n            this.media.volume = this.volume;\n        }\n    }\n\n    /**\n     * Enable or disable muted audio\n     *\n     * @since 4.0.0\n     * @param {boolean} muted Specify `true` to mute audio.\n     */\n    setMute(muted) {\n        // This causes a volume change to be emitted too through the\n        // volumechange event listener.\n        this.isMuted = this.media.muted = muted;\n    }\n\n    /**\n     * This is called when wavesurfer is destroyed\n     *\n     */\n    destroy() {\n        this.pause();\n        this.unAll();\n        this.destroyed = true;\n\n        // cleanup media event listeners\n        Object.keys(this.mediaListeners).forEach(id => {\n            if (this.media) {\n                this.media.removeEventListener(id, this.mediaListeners[id]);\n            }\n        });\n\n        if (\n            this.params.removeMediaElementOnDestroy &&\n            this.media &&\n            this.media.parentNode\n        ) {\n            this.media.parentNode.removeChild(this.media);\n        }\n\n        this.media = null;\n    }\n}\n","/**\n * Caches the decoded peaks data to improve rendering speed for large audio\n *\n * Is used if the option parameter `partialRender` is set to `true`\n */\nexport default class PeakCache {\n    /**\n     * Instantiate cache\n     */\n    constructor() {\n        this.clearPeakCache();\n    }\n\n    /**\n     * Empty the cache\n     */\n    clearPeakCache() {\n        /**\n         * Flat array with entries that are always in pairs to mark the\n         * beginning and end of each subrange.  This is a convenience so we can\n         * iterate over the pairs for easy set difference operations.\n         * @private\n         */\n        this.peakCacheRanges = [];\n        /**\n         * Length of the entire cachable region, used for resetting the cache\n         * when this changes (zoom events, for instance).\n         * @private\n         */\n        this.peakCacheLength = -1;\n    }\n\n    /**\n     * Add a range of peaks to the cache\n     *\n     * @param {number} length The length of the range\n     * @param {number} start The x offset of the start of the range\n     * @param {number} end The x offset of the end of the range\n     * @return {Number.<Array[]>} Array with arrays of numbers\n     */\n    addRangeToPeakCache(length, start, end) {\n        if (length != this.peakCacheLength) {\n            this.clearPeakCache();\n            this.peakCacheLength = length;\n        }\n\n        // Return ranges that weren't in the cache before the call.\n        let uncachedRanges = [];\n        let i = 0;\n        // Skip ranges before the current start.\n        while (\n            i < this.peakCacheRanges.length &&\n            this.peakCacheRanges[i] < start\n        ) {\n            i++;\n        }\n        // If |i| is even, |start| falls after an existing range.  Otherwise,\n        // |start| falls between an existing range, and the uncached region\n        // starts when we encounter the next node in |peakCacheRanges| or\n        // |end|, whichever comes first.\n        if (i % 2 == 0) {\n            uncachedRanges.push(start);\n        }\n        while (\n            i < this.peakCacheRanges.length &&\n            this.peakCacheRanges[i] <= end\n        ) {\n            uncachedRanges.push(this.peakCacheRanges[i]);\n            i++;\n        }\n        // If |i| is even, |end| is after all existing ranges.\n        if (i % 2 == 0) {\n            uncachedRanges.push(end);\n        }\n\n        // Filter out the 0-length ranges.\n        uncachedRanges = uncachedRanges.filter((item, pos, arr) => {\n            if (pos == 0) {\n                return item != arr[pos + 1];\n            } else if (pos == arr.length - 1) {\n                return item != arr[pos - 1];\n            }\n            return item != arr[pos - 1] && item != arr[pos + 1];\n        });\n\n        // Merge the two ranges together, uncachedRanges will either contain\n        // wholly new points, or duplicates of points in peakCacheRanges.  If\n        // duplicates are detected, remove both and extend the range.\n        this.peakCacheRanges = this.peakCacheRanges.concat(uncachedRanges);\n        this.peakCacheRanges = this.peakCacheRanges\n            .sort((a, b) => a - b)\n            .filter((item, pos, arr) => {\n                if (pos == 0) {\n                    return item != arr[pos + 1];\n                } else if (pos == arr.length - 1) {\n                    return item != arr[pos - 1];\n                }\n                return item != arr[pos - 1] && item != arr[pos + 1];\n            });\n\n        // Push the uncached ranges into an array of arrays for ease of\n        // iteration in the functions that call this.\n        const uncachedRangePairs = [];\n        for (i = 0; i < uncachedRanges.length; i += 2) {\n            uncachedRangePairs.push([uncachedRanges[i], uncachedRanges[i + 1]]);\n        }\n\n        return uncachedRangePairs;\n    }\n\n    /**\n     * For testing\n     *\n     * @return {Number.<Array[]>} Array with arrays of numbers\n     */\n    getCacheRanges() {\n        const peakCacheRangePairs = [];\n        let i;\n        for (i = 0; i < this.peakCacheRanges.length; i += 2) {\n            peakCacheRangePairs.push([\n                this.peakCacheRanges[i],\n                this.peakCacheRanges[i + 1]\n            ]);\n        }\n        return peakCacheRangePairs;\n    }\n}\n","import utilMax from './max';\r\nimport utilmin from './min';\r\n\r\n/**\r\n * Get the largest absolute value in an array\r\n *\r\n * @param   {Array} values Array of numbers\r\n * @returns {Number} Largest number found\r\n * @example console.log(max([-3, 2, 1]), max([-3, 2, 4])); // logs 3 4\r\n * @since 4.3.0\r\n */\r\nexport default function absMax(values) {\r\n    const max = utilMax(values);\r\n    const min = utilmin(values);\r\n    return -min > max ? -min : max;\r\n}\r\n","/**\n * @since 3.0.0\n */\n\nimport Observer from './observer';\n\nclass ProgressHandler {\n    /**\n     * Instantiate ProgressHandler\n     *\n     * @param {Observer} instance The `fetchFile` observer instance.\n     * @param {Number} contentLength Content length.\n     * @param {Response} response Response object.\n     */\n    constructor(instance, contentLength, response) {\n        this.instance = instance;\n        this.instance._reader = response.body.getReader();\n\n        this.total = parseInt(contentLength, 10);\n        this.loaded = 0;\n    }\n\n    /**\n     * A method that is called once, immediately after the `ReadableStream``\n     * is constructed.\n     *\n     * @param {ReadableStreamDefaultController} controller Controller instance\n     *     used to control the stream.\n     */\n    start(controller) {\n        const read = () => {\n            // instance._reader.read() returns a promise that resolves\n            // when a value has been received\n            this.instance._reader\n                .read()\n                .then(({ done, value }) => {\n                    // result objects contain two properties:\n                    // done  - true if the stream has already given you all its data.\n                    // value - some data. Always undefined when done is true.\n                    if (done) {\n                        // ensure onProgress called when content-length=0\n                        if (this.total === 0) {\n                            this.instance.onProgress.call(this.instance, {\n                                loaded: this.loaded,\n                                total: this.total,\n                                lengthComputable: false\n                            });\n                        }\n                        // no more data needs to be consumed, close the stream\n                        controller.close();\n                        return;\n                    }\n\n                    this.loaded += value.byteLength;\n                    this.instance.onProgress.call(this.instance, {\n                        loaded: this.loaded,\n                        total: this.total,\n                        lengthComputable: !(this.total === 0)\n                    });\n                    // enqueue the next data chunk into our target stream\n                    controller.enqueue(value);\n                    read();\n                })\n                .catch(error => {\n                    controller.error(error);\n                });\n        };\n\n        read();\n    }\n}\n\n/**\n * Load a file using `fetch`.\n *\n * @param {object} options Request options to use. See example below.\n * @returns {Observer} Observer instance\n * @example\n * // default options\n * let options = {\n *     url: undefined,\n *     method: 'GET',\n *     mode: 'cors',\n *     credentials: 'same-origin',\n *     cache: 'default',\n *     responseType: 'json',\n *     requestHeaders: [],\n *     redirect: 'follow',\n *     referrer: 'client'\n * };\n *\n * // override some options\n * options.url = '../media/demo.wav';\n\n * // available types: 'arraybuffer', 'blob', 'json' or 'text'\n * options.responseType = 'arraybuffer';\n *\n * // make fetch call\n * let request = util.fetchFile(options);\n *\n * // listen for events\n * request.on('progress', e => {\n *     console.log('progress', e);\n * });\n *\n * request.on('success', data => {\n *     console.log('success!', data);\n * });\n *\n * request.on('error', e => {\n *     console.warn('fetchFile error: ', e);\n * });\n */\nexport default function fetchFile(options) {\n    if (!options) {\n        throw new Error('fetch options missing');\n    } else if (!options.url) {\n        throw new Error('fetch url missing');\n    }\n    const instance = new Observer();\n    const fetchHeaders = new Headers();\n    const fetchRequest = new Request(options.url);\n\n    // add ability to abort\n    instance.controller = new AbortController();\n\n    // check if headers have to be added\n    if (options && options.requestHeaders) {\n        // add custom request headers\n        options.requestHeaders.forEach(header => {\n            fetchHeaders.append(header.key, header.value);\n        });\n    }\n\n    // parse fetch options\n    const responseType = options.responseType || 'json';\n    const fetchOptions = {\n        method: options.method || 'GET',\n        headers: fetchHeaders,\n        mode: options.mode || 'cors',\n        credentials: options.credentials || 'same-origin',\n        cache: options.cache || 'default',\n        redirect: options.redirect || 'follow',\n        referrer: options.referrer || 'client',\n        signal: instance.controller.signal\n    };\n\n    fetch(fetchRequest, fetchOptions)\n        .then(response => {\n            // store response reference\n            instance.response = response;\n\n            let progressAvailable = true;\n            if (!response.body) {\n                // ReadableStream is not yet supported in this browser\n                // see https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream\n                progressAvailable = false;\n            }\n\n            // Server must send CORS header \"Access-Control-Expose-Headers: content-length\"\n            const contentLength = response.headers.get('content-length');\n            if (contentLength === null) {\n                // Content-Length server response header missing.\n                // Don't evaluate download progress if we can't compare against a total size\n                // see https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Access-Control-Expose-Headers\n                progressAvailable = false;\n            }\n\n            if (!progressAvailable) {\n                // not able to check download progress so skip it\n                return response;\n            }\n\n            // fire progress event when during load\n            instance.onProgress = e => {\n                instance.fireEvent('progress', e);\n            };\n\n            return new Response(\n                new ReadableStream(\n                    new ProgressHandler(instance, contentLength, response)\n                ),\n                fetchOptions\n            );\n        })\n        .then(response => {\n            let errMsg;\n            if (response.ok) {\n                switch (responseType) {\n                    case 'arraybuffer':\n                        return response.arrayBuffer();\n\n                    case 'json':\n                        return response.json();\n\n                    case 'blob':\n                        return response.blob();\n\n                    case 'text':\n                        return response.text();\n\n                    default:\n                        errMsg = 'Unknown responseType: ' + responseType;\n                        break;\n                }\n            }\n            if (!errMsg) {\n                errMsg = 'HTTP error status: ' + response.status;\n            }\n            throw new Error(errMsg);\n        })\n        .then(response => {\n            instance.fireEvent('success', response);\n        })\n        .catch(error => {\n            instance.fireEvent('error', error);\n        });\n\n    // return the fetch request\n    instance.fetchRequest = fetchRequest;\n    return instance;\n}\n","import reqAnimationFrame from './request-animation-frame';\n\n/**\n * Create a function which will be called at the next requestAnimationFrame\n * cycle\n *\n * @param {function} func The function to call\n *\n * @return {func} The function wrapped within a requestAnimationFrame\n */\nexport default function frame(func) {\n    return (...args) => reqAnimationFrame(() => func(...args));\n}\n","export { default as getId } from './get-id';\nexport { default as max } from './max';\nexport { default as min } from './min';\nexport { default as absMax } from './absMax';\nexport { default as Observer } from './observer';\nexport { default as style } from './style';\nexport { default as requestAnimationFrame } from './request-animation-frame';\nexport { default as frame } from './frame';\nexport { default as debounce } from 'debounce';\nexport { default as preventClick } from './prevent-click';\nexport { default as fetchFile } from './fetch';\nexport { default as clamp } from './clamp';\nexport { default as withOrientation } from './orientation';\nexport { default as ignoreSilenceMode } from './silence-mode';\n","/**\n * Get the largest value\n *\n * @param   {Array} values Array of numbers\n * @returns {Number} Largest number found\n * @example console.log(max([1, 2, 3])); // logs 3\n */\nexport default function max(values) {\n    let largest = -Infinity;\n    Object.keys(values).forEach(i => {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    });\n    return largest;\n}\n","/**\n * Get the smallest value\n *\n * @param   {Array} values Array of numbers\n * @returns {Number} Smallest number found\n * @example console.log(min([1, 2, 3])); // logs 1\n */\nexport default function min(values) {\n    let smallest = Number(Infinity);\n    Object.keys(values).forEach(i => {\n        if (values[i] < smallest) {\n            smallest = values[i];\n        }\n    });\n    return smallest;\n}\n","/**\n * @typedef {Object} ListenerDescriptor\n * @property {string} name The name of the event\n * @property {function} callback The callback\n * @property {function} un The function to call to remove the listener\n */\n\n/**\n * Observer class\n */\nexport default class Observer {\n    /**\n     * Instantiate Observer\n     */\n    constructor() {\n        /**\n         * @private\n         * @todo Initialise the handlers here already and remove the conditional\n         * assignment in `on()`\n         */\n        this._disabledEventEmissions = [];\n        this.handlers = null;\n    }\n    /**\n     * Attach a handler function for an event.\n     *\n     * @param {string} event Name of the event to listen to\n     * @param {function} fn The callback to trigger when the event is fired\n     * @return {ListenerDescriptor} The event descriptor\n     */\n    on(event, fn) {\n        if (!this.handlers) {\n            this.handlers = {};\n        }\n\n        let handlers = this.handlers[event];\n        if (!handlers) {\n            handlers = this.handlers[event] = [];\n        }\n        handlers.push(fn);\n\n        // Return an event descriptor\n        return {\n            name: event,\n            callback: fn,\n            un: (e, fn) => this.un(e, fn)\n        };\n    }\n\n    /**\n     * Remove an event handler.\n     *\n     * @param {string} event Name of the event the listener that should be\n     * removed listens to\n     * @param {function} fn The callback that should be removed\n     */\n    un(event, fn) {\n        if (!this.handlers) {\n            return;\n        }\n\n        const handlers = this.handlers[event];\n        let i;\n        if (handlers) {\n            if (fn) {\n                for (i = handlers.length - 1; i >= 0; i--) {\n                    if (handlers[i] == fn) {\n                        handlers.splice(i, 1);\n                    }\n                }\n            } else {\n                handlers.length = 0;\n            }\n        }\n    }\n\n    /**\n     * Remove all event handlers.\n     */\n    unAll() {\n        this.handlers = null;\n    }\n\n    /**\n     * Attach a handler to an event. The handler is executed at most once per\n     * event type.\n     *\n     * @param {string} event The event to listen to\n     * @param {function} handler The callback that is only to be called once\n     * @return {ListenerDescriptor} The event descriptor\n     */\n    once(event, handler) {\n        const fn = (...args) => {\n            /*  eslint-disable no-invalid-this */\n            handler.apply(this, args);\n            /*  eslint-enable no-invalid-this */\n            setTimeout(() => {\n                this.un(event, fn);\n            }, 0);\n        };\n        return this.on(event, fn);\n    }\n\n    /**\n     * Disable firing a list of events by name. When specified, event handlers for any event type\n     * passed in here will not be called.\n     *\n     * @since 4.0.0\n     * @param {string[]} eventNames an array of event names to disable emissions for\n     * @example\n     * // disable seek and interaction events\n     * wavesurfer.setDisabledEventEmissions(['seek', 'interaction']);\n     */\n    setDisabledEventEmissions(eventNames) {\n        this._disabledEventEmissions = eventNames;\n    }\n\n    /**\n     * plugins borrow part of this class without calling the constructor,\n     * so we have to be careful about _disabledEventEmissions\n     */\n\n    _isDisabledEventEmission(event) {\n        return this._disabledEventEmissions && this._disabledEventEmissions.includes(event);\n    }\n\n    /**\n     * Manually fire an event\n     *\n     * @param {string} event The event to fire manually\n     * @param {...any} args The arguments with which to call the listeners\n     */\n    fireEvent(event, ...args) {\n        if (!this.handlers || this._isDisabledEventEmission(event)) {\n            return;\n        }\n\n        const handlers = this.handlers[event];\n        handlers &&\n            handlers.forEach(fn => {\n                fn(...args);\n            });\n    }\n}\n","const verticalPropMap = {\n    width: 'height',\n    height: 'width',\n\n    overflowX: 'overflowY',\n    overflowY: 'overflowX',\n\n    clientWidth: 'clientHeight',\n    clientHeight: 'clientWidth',\n\n    clientX: 'clientY',\n    clientY: 'clientX',\n\n    scrollWidth: 'scrollHeight',\n    scrollLeft: 'scrollTop',\n\n    offsetLeft: 'offsetTop',\n    offsetTop: 'offsetLeft',\n    offsetHeight: 'offsetWidth',\n    offsetWidth: 'offsetHeight',\n\n    left: 'top',\n    right: 'bottom',\n    top: 'left',\n    bottom: 'right',\n\n    borderRightStyle: 'borderBottomStyle',\n    borderRightWidth: 'borderBottomWidth',\n    borderRightColor: 'borderBottomColor'\n};\n\n/**\n * Convert a horizontally-oriented property name to a vertical one.\n *\n * @param {string} prop A property name\n * @param {bool} vertical Whether the element is oriented vertically\n * @returns {string} prop, converted appropriately\n */\nfunction mapProp(prop, vertical) {\n    if (Object.prototype.hasOwnProperty.call(verticalPropMap, prop)) {\n        return vertical ? verticalPropMap[prop] : prop;\n    } else {\n        return prop;\n    }\n}\n\nconst isProxy = Symbol(\"isProxy\");\n\n/**\n * Returns an appropriately oriented object based on vertical.\n * If vertical is true, attribute getting and setting will be mapped through\n * verticalPropMap, so that e.g. getting the object's .width will give its\n * .height instead.\n * Certain methods of an oriented object will return oriented objects as well.\n * Oriented objects can't be added to the DOM directly since they are Proxy objects\n * and thus fail typechecks. Use domElement to get the actual element for this.\n *\n * @param {object} target The object to be wrapped and oriented\n * @param {bool} vertical Whether the element is oriented vertically\n * @returns {Proxy} An oriented object with attr translation via verticalAttrMap\n * @since 5.0.0\n */\nexport default function withOrientation(target, vertical) {\n    if (target[isProxy]) {\n        return target;\n    } else {\n        return new Proxy(\n            target, {\n                get: function(obj, prop, receiver) {\n                    if (prop === isProxy) {\n                        return true;\n                    } else if (prop === 'domElement') {\n                        return obj;\n                    } else if (prop === 'style') {\n                        return withOrientation(obj.style, vertical);\n                    } else if (prop === 'canvas') {\n                        return withOrientation(obj.canvas, vertical);\n                    } else if (prop === 'getBoundingClientRect') {\n                        return function(...args) {\n                            return withOrientation(obj.getBoundingClientRect(...args), vertical);\n                        };\n                    } else if (prop === 'getContext') {\n                        return function(...args) {\n                            return withOrientation(obj.getContext(...args), vertical);\n                        };\n                    } else {\n                        let value = obj[mapProp(prop, vertical)];\n                        return typeof value == 'function' ? value.bind(obj) : value;\n                    }\n                },\n                set: function(obj, prop, value) {\n                    obj[mapProp(prop, vertical)] = value;\n                    return true;\n                }\n            }\n        );\n    }\n}\n","/**\n * Stops propagation of click event and removes event listener\n *\n * @private\n * @param {object} event The click event\n */\nfunction preventClickHandler(event) {\n    event.stopPropagation();\n    document.body.removeEventListener('click', preventClickHandler, true);\n}\n\n/**\n * Starts listening for click event and prevent propagation\n *\n * @param {object} values Values\n */\nexport default function preventClick(values) {\n    document.body.addEventListener('click', preventClickHandler, true);\n}\n","/* eslint-disable valid-jsdoc */\n/**\n * Returns the `requestAnimationFrame` function for the browser, or a shim with\n * `setTimeout` if the function is not found\n *\n * @return {function} Available `requestAnimationFrame` function for the browser\n */\nexport default (\n    window.requestAnimationFrame ||\n    window.webkitRequestAnimationFrame ||\n    window.mozRequestAnimationFrame ||\n    window.oRequestAnimationFrame ||\n    window.msRequestAnimationFrame ||\n    ((callback, element) => setTimeout(callback, 1000 / 60))\n).bind(window);\n","/**\n * Ignores device silence mode when using the `WebAudio` backend.\n *\n * Many mobile devices contain a hardware button to mute the ringtone for incoming\n * calls and messages. Unfortunately, on some platforms like iOS, this also mutes\n * wavesurfer's audio when using the `WebAudio` backend. This function creates a\n * temporary `<audio>` element that makes sure the WebAudio backend keeps playing\n * when muting the device ringer.\n *\n * @since 5.2.0\n */\nexport default function ignoreSilenceMode() {\n    // Set the src to a short bit of url encoded as a silent mp3\n    // NOTE The silence MP3 must be high quality, when web audio sounds are played\n    // in parallel the web audio sound is mixed to match the bitrate of the html sound\n    // 0.01 seconds of silence VBR220-260 Joint Stereo 859B\n    const audioData = \"data:audio/mpeg;base64,//uQxAAAAAAAAAAAAAAAAAAAAAAAWGluZwAAAA8AAAACAAACcQCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA//////////////////////////////////////////////////////////////////8AAABhTEFNRTMuMTAwA8MAAAAAAAAAABQgJAUHQQAB9AAAAnGMHkkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//sQxAADgnABGiAAQBCqgCRMAAgEAH///////////////7+n/9FTuQsQH//////2NG0jWUGlio5gLQTOtIoeR2WX////X4s9Atb/JRVCbBUpeRUq//////////////////9RUi0f2jn/+xDECgPCjAEQAABN4AAANIAAAAQVTEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVQ==\";\n\n    // disable iOS Airplay (setting the attribute in js doesn't work)\n    let tmp = document.createElement(\"div\");\n    tmp.innerHTML = '<audio x-webkit-airplay=\"deny\"></audio>';\n\n    let audioSilentMode = tmp.children.item(0);\n    audioSilentMode.src = audioData;\n    audioSilentMode.preload = \"auto\";\n    audioSilentMode.type = \"audio/mpeg\";\n    audioSilentMode.disableRemotePlayback = true;\n\n    // play\n    audioSilentMode.play();\n\n    // cleanup\n    audioSilentMode.remove();\n    tmp.remove();\n}\n","import * as util from './util';\nimport MultiCanvas from './drawer.multicanvas';\nimport WebAudio from './webaudio';\nimport MediaElement from './mediaelement';\nimport PeakCache from './peakcache';\nimport MediaElementWebAudio from './mediaelement-webaudio';\n\n/*\n * This work is licensed under a BSD-3-Clause License.\n */\n\n/** @external {HTMLElement} https://developer.mozilla.org/en/docs/Web/API/HTMLElement */\n/** @external {OfflineAudioContext} https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext */\n/** @external {File} https://developer.mozilla.org/en-US/docs/Web/API/File */\n/** @external {Blob} https://developer.mozilla.org/en-US/docs/Web/API/Blob */\n/** @external {CanvasRenderingContext2D} https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D */\n/** @external {MediaStreamConstraints} https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints */\n/** @external {AudioNode} https://developer.mozilla.org/de/docs/Web/API/AudioNode */\n\n/**\n * @typedef {Object} WavesurferParams\n * @property {AudioContext} audioContext=null Use your own previously\n * initialized AudioContext or leave blank.\n * @property {number} audioRate=1 Speed at which to play audio. Lower number is\n * slower.\n * @property {ScriptProcessorNode} audioScriptProcessor=null Use your own previously\n * initialized ScriptProcessorNode or leave blank.\n * @property {boolean} autoCenter=true If a scrollbar is present, center the\n * waveform on current progress\n * @property {number} autoCenterRate=5 If autoCenter is active, rate at which the\n * waveform is centered\n * @property {boolean} autoCenterImmediately=false If autoCenter is active, immediately\n * center waveform on current progress\n * @property {string} backend='WebAudio' `'WebAudio'|'MediaElement'|'MediaElementWebAudio'` In most cases\n * you don't have to set this manually. MediaElement is a fallback for unsupported browsers.\n * MediaElementWebAudio allows to use WebAudio API also with big audio files, loading audio like with\n * MediaElement backend (HTML5 audio tag). You have to use the same methods of MediaElement backend for loading and\n * playback, giving also peaks, so the audio data are not decoded. In this way you can use WebAudio features, like filters,\n * also with audio with big duration. For example:\n * ` wavesurfer.load(url | HTMLMediaElement, peaks, preload, duration);\n *   wavesurfer.play();\n *   wavesurfer.setFilter(customFilter);\n * `\n * @property {string} backgroundColor=null Change background color of the\n * waveform container.\n * @property {number} barHeight=1 The height of the wave bars.\n * @property {number} barRadius=0 The radius of the wave bars. Makes bars rounded\n * @property {number} barGap=null The optional spacing between bars of the wave,\n * if not provided will be calculated in legacy format.\n * @property {number} barWidth=null Draw the waveform using bars.\n * @property {number} barMinHeight=null If specified, draw at least a bar of this height,\n * eliminating waveform gaps\n * @property {boolean} closeAudioContext=false Close and nullify all audio\n * contexts when the destroy method is called.\n * @property {!string|HTMLElement} container CSS selector or HTML element where\n * the waveform should be drawn. This is the only required parameter.\n * @property {string} cursorColor='#333' The fill color of the cursor indicating\n * the playhead position.\n * @property {number} cursorWidth=1 Measured in pixels.\n * @property {object} drawingContextAttributes={desynchronized: false} Drawing context\n * attributes.\n * @property {number} duration=null Optional audio length so pre-rendered peaks\n * can be display immediately for example.\n * @property {boolean} fillParent=true Whether to fill the entire container or\n * draw only according to `minPxPerSec`.\n * @property {boolean} forceDecode=false Force decoding of audio using web audio\n * when zooming to get a more detailed waveform.\n * @property {number} height=128 The height of the waveform. Measured in\n * pixels.\n * @property {boolean} hideScrollbar=false Whether to hide the horizontal\n * scrollbar when one would normally be shown.\n * @property {boolean} ignoreSilenceMode=false If true, ignores device silence mode\n * when using the `WebAudio` backend.\n * @property {boolean} interact=true Whether the mouse interaction will be\n * enabled at initialization. You can switch this parameter at any time later\n * on.\n * @property {boolean} loopSelection=true (Use with regions plugin) Enable\n * looping of selected regions\n * @property {number} maxCanvasWidth=4000 Maximum width of a single canvas in\n * pixels, excluding a small overlap (2 * `pixelRatio`, rounded up to the next\n * even integer). If the waveform is longer than this value, additional canvases\n * will be used to render the waveform, which is useful for very large waveforms\n * that may be too wide for browsers to draw on a single canvas.\n * @property {boolean} mediaControls=false (Use with backend `MediaElement` or `MediaElementWebAudio`)\n * this enables the native controls for the media element\n * @property {string} mediaType='audio' (Use with backend `MediaElement` or `MediaElementWebAudio`)\n * `'audio'|'video'` ('video' only for `MediaElement`)\n * @property {number} minPxPerSec=20 Minimum number of pixels per second of\n * audio.\n * @property {boolean} normalize=false If true, normalize by the maximum peak\n * instead of 1.0.\n * @property {boolean} partialRender=false Use the PeakCache to improve\n * rendering speed of large waveforms\n * @property {number} pixelRatio=window.devicePixelRatio The pixel ratio used to\n * calculate display\n * @property {PluginDefinition[]} plugins=[] An array of plugin definitions to\n * register during instantiation, they will be directly initialised unless they\n * are added with the `deferInit` property set to true.\n * @property {string} progressColor='#555' The fill color of the part of the\n * waveform behind the cursor. When `progressColor` and `waveColor` are the same\n * the progress wave is not rendered at all.\n * @property {boolean} removeMediaElementOnDestroy=true Set to false to keep the\n * media element in the DOM when the player is destroyed. This is useful when\n * reusing an existing media element via the `loadMediaElement` method.\n * @property {Object} renderer=MultiCanvas Can be used to inject a custom\n * renderer.\n * @property {boolean|number} responsive=false If set to `true` resize the\n * waveform, when the window is resized. This is debounced with a `100ms`\n * timeout by default. If this parameter is a number it represents that timeout.\n * @property {boolean} rtl=false If set to `true`, renders waveform from\n * right-to-left.\n * @property {boolean} scrollParent=false Whether to scroll the container with a\n * lengthy waveform. Otherwise the waveform is shrunk to the container width\n * (see fillParent).\n * @property {number} skipLength=2 Number of seconds to skip with the\n * skipForward() and skipBackward() methods.\n * @property {boolean} splitChannels=false Render with separate waveforms for\n * the channels of the audio\n * @property {SplitChannelOptions} splitChannelsOptions={} Options for splitChannel rendering\n * @property {boolean} vertical=false Render the waveform vertically instead of horizontally.\n * @property {string} waveColor='#999' The fill color of the waveform after the\n * cursor.\n * @property {object} xhr={} XHR options. For example:\n * `let xhr = {\n *     cache: 'default',\n *     mode: 'cors',\n *     method: 'GET',\n *     credentials: 'same-origin',\n *     redirect: 'follow',\n *     referrer: 'client',\n *     requestHeaders: [\n *         {\n *             key: 'Authorization',\n *             value: 'my-token'\n *         }\n *     ]\n * };`\n */\n\n/**\n * @typedef {Object} PluginDefinition\n * @desc The Object used to describe a plugin\n * @example wavesurfer.addPlugin(pluginDefinition);\n * @property {string} name The name of the plugin, the plugin instance will be\n * added as a property to the wavesurfer instance under this name\n * @property {?Object} staticProps The properties that should be added to the\n * wavesurfer instance as static properties\n * @property {?boolean} deferInit Don't initialise plugin\n * automatically\n * @property {Object} params={} The plugin parameters, they are the first parameter\n * passed to the plugin class constructor function\n * @property {PluginClass} instance The plugin instance factory, is called with\n * the dependency specified in extends. Returns the plugin class.\n */\n\n/**\n * @typedef {Object} SplitChannelOptions\n * @desc parameters applied when splitChannels option is true\n * @property {boolean} overlay=false determines whether channels are rendered on top of each other or on separate tracks\n * @property {object} channelColors={} object describing color for each channel. Example:\n * {\n *     0: {\n *         progressColor: 'green',\n *         waveColor: 'pink'\n *     },\n *     1: {\n *         progressColor: 'orange',\n *         waveColor: 'purple'\n *     }\n * }\n * @property {number[]} filterChannels=[] indexes of channels to be hidden from rendering\n * @property {boolean} relativeNormalization=false determines whether\n * normalization is done per channel or maintains proportionality between\n * channels. Only applied when normalize and splitChannels are both true.\n * @since 4.3.0\n */\n\n/**\n * @interface PluginClass\n *\n * @desc This is the interface which is implemented by all plugin classes. Note\n * that this only turns into an observer after being passed through\n * `wavesurfer.addPlugin`.\n *\n * @extends {Observer}\n */\nclass PluginClass {\n    /**\n     * Plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * It returns a `PluginDefinition` object representing the plugin.\n     *\n     * @param {Object} params={} The plugin params (specific to the plugin)\n     */\n    create(params) {}\n    /**\n     * Construct the plugin\n     *\n     * @param {Object} params={} The plugin params (specific to the plugin)\n     * @param {Object} ws The wavesurfer instance\n     */\n    constructor(params, ws) {}\n    /**\n     * Initialise the plugin\n     *\n     * Start doing something. This is called by\n     * `wavesurfer.initPlugin(pluginName)`\n     */\n    init() {}\n    /**\n     * Destroy the plugin instance\n     *\n     * Stop doing something. This is called by\n     * `wavesurfer.destroyPlugin(pluginName)`\n     */\n    destroy() {}\n}\n\n/**\n * WaveSurfer core library class\n *\n * @extends {Observer}\n * @example\n * const params = {\n *   container: '#waveform',\n *   waveColor: 'violet',\n *   progressColor: 'purple'\n * };\n *\n * // initialise like this\n * const wavesurfer = WaveSurfer.create(params);\n *\n * // or like this ...\n * const wavesurfer = new WaveSurfer(params);\n * wavesurfer.init();\n *\n * // load audio file\n * wavesurfer.load('example/media/demo.wav');\n */\nexport default class WaveSurfer extends util.Observer {\n    /** @private */\n    defaultParams = {\n        audioContext: null,\n        audioScriptProcessor: null,\n        audioRate: 1,\n        autoCenter: true,\n        autoCenterRate: 5,\n        autoCenterImmediately: false,\n        backend: 'WebAudio',\n        backgroundColor: null,\n        barHeight: 1,\n        barRadius: 0,\n        barGap: null,\n        barMinHeight: null,\n        container: null,\n        cursorColor: '#333',\n        cursorWidth: 1,\n        dragSelection: true,\n        drawingContextAttributes: {\n            // Boolean that hints the user agent to reduce the latency\n            // by desynchronizing the canvas paint cycle from the event\n            // loop\n            desynchronized: false\n        },\n        duration: null,\n        fillParent: true,\n        forceDecode: false,\n        height: 128,\n        hideScrollbar: false,\n        ignoreSilenceMode: false,\n        interact: true,\n        loopSelection: true,\n        maxCanvasWidth: 4000,\n        mediaContainer: null,\n        mediaControls: false,\n        mediaType: 'audio',\n        minPxPerSec: 20,\n        normalize: false,\n        partialRender: false,\n        pixelRatio:\n            window.devicePixelRatio || screen.deviceXDPI / screen.logicalXDPI,\n        plugins: [],\n        progressColor: '#555',\n        removeMediaElementOnDestroy: true,\n        renderer: MultiCanvas,\n        responsive: false,\n        rtl: false,\n        scrollParent: false,\n        skipLength: 2,\n        splitChannels: false,\n        splitChannelsOptions: {\n            overlay: false,\n            channelColors: {},\n            filterChannels: [],\n            relativeNormalization: false\n        },\n        vertical: false,\n        waveColor: '#999',\n        xhr: {}\n    };\n\n    /** @private */\n    backends = {\n        MediaElement,\n        WebAudio,\n        MediaElementWebAudio\n    };\n\n    /**\n     * Instantiate this class, call its `init` function and returns it\n     *\n     * @param {WavesurferParams} params The wavesurfer parameters\n     * @return {Object} WaveSurfer instance\n     * @example const wavesurfer = WaveSurfer.create(params);\n     */\n    static create(params) {\n        const wavesurfer = new WaveSurfer(params);\n        return wavesurfer.init();\n    }\n\n    /**\n     * The library version number is available as a static property of the\n     * WaveSurfer class\n     *\n     * @type {String}\n     * @example\n     * console.log('Using wavesurfer.js ' + WaveSurfer.VERSION);\n     */\n    static VERSION = __VERSION__;\n\n    /**\n     * Functions in the `util` property are available as a prototype property to\n     * all instances\n     *\n     * @type {Object}\n     * @example\n     * const wavesurfer = WaveSurfer.create(params);\n     * wavesurfer.util.style(myElement, { background: 'blue' });\n     */\n    util = util;\n\n    /**\n     * Functions in the `util` property are available as a static property of the\n     * WaveSurfer class\n     *\n     * @type {Object}\n     * @example\n     * WaveSurfer.util.style(myElement, { background: 'blue' });\n     */\n    static util = util;\n\n    /**\n     * Initialise wavesurfer instance\n     *\n     * @param {WavesurferParams} params Instantiation options for wavesurfer\n     * @example\n     * const wavesurfer = new WaveSurfer(params);\n     * @returns {this} Wavesurfer instance\n     */\n    constructor(params) {\n        super();\n        /**\n         * Extract relevant parameters (or defaults)\n         * @private\n         */\n        this.params = Object.assign({}, this.defaultParams, params);\n        this.params.splitChannelsOptions = Object.assign(\n            {},\n            this.defaultParams.splitChannelsOptions,\n            params.splitChannelsOptions\n        );\n        /** @private */\n        this.container =\n            'string' == typeof params.container\n                ? document.querySelector(this.params.container)\n                : this.params.container;\n\n        if (!this.container) {\n            throw new Error('Container element not found');\n        }\n\n        if (this.params.mediaContainer == null) {\n            /** @private */\n            this.mediaContainer = this.container;\n        } else if (typeof this.params.mediaContainer == 'string') {\n            /** @private */\n            this.mediaContainer = document.querySelector(\n                this.params.mediaContainer\n            );\n        } else {\n            /** @private */\n            this.mediaContainer = this.params.mediaContainer;\n        }\n\n        if (!this.mediaContainer) {\n            throw new Error('Media Container element not found');\n        }\n\n        if (this.params.maxCanvasWidth <= 1) {\n            throw new Error('maxCanvasWidth must be greater than 1');\n        } else if (this.params.maxCanvasWidth % 2 == 1) {\n            throw new Error('maxCanvasWidth must be an even number');\n        }\n\n        if (this.params.rtl === true) {\n            if (this.params.vertical === true) {\n                util.style(this.container, { transform: 'rotateX(180deg)' });\n            } else {\n                util.style(this.container, { transform: 'rotateY(180deg)' });\n            }\n        }\n\n        if (this.params.backgroundColor) {\n            this.setBackgroundColor(this.params.backgroundColor);\n        }\n\n        /**\n         * @private Used to save the current volume when muting so we can\n         * restore once unmuted\n         * @type {number}\n         */\n        this.savedVolume = 0;\n\n        /**\n         * @private The current muted state\n         * @type {boolean}\n         */\n        this.isMuted = false;\n\n        /**\n         * @private Will hold a list of event descriptors that need to be\n         * canceled on subsequent loads of audio\n         * @type {Object[]}\n         */\n        this.tmpEvents = [];\n\n        /**\n         * @private Holds any running audio downloads\n         * @type {Observer}\n         */\n        this.currentRequest = null;\n        /** @private */\n        this.arraybuffer = null;\n        /** @private */\n        this.drawer = null;\n        /** @private */\n        this.backend = null;\n        /** @private */\n        this.peakCache = null;\n\n        // cache constructor objects\n        if (typeof this.params.renderer !== 'function') {\n            throw new Error('Renderer parameter is invalid');\n        }\n        /**\n         * @private The uninitialised Drawer class\n         */\n        this.Drawer = this.params.renderer;\n        /**\n         * @private The uninitialised Backend class\n         */\n        // Back compat\n        if (this.params.backend == 'AudioElement') {\n            this.params.backend = 'MediaElement';\n        }\n\n        if (\n            (this.params.backend == 'WebAudio' ||\n                this.params.backend === 'MediaElementWebAudio') &&\n            !WebAudio.prototype.supportsWebAudio.call(null)\n        ) {\n            this.params.backend = 'MediaElement';\n        }\n        this.Backend = this.backends[this.params.backend];\n\n        /**\n         * @private map of plugin names that are currently initialised\n         */\n        this.initialisedPluginList = {};\n        /** @private */\n        this.isDestroyed = false;\n\n        /**\n         * Get the current ready status.\n         *\n         * @example const isReady = wavesurfer.isReady;\n         * @return {boolean}\n         */\n        this.isReady = false;\n\n        // responsive debounced event listener. If this.params.responsive is not\n        // set, this is never called. Use 100ms or this.params.responsive as\n        // timeout for the debounce function.\n        let prevWidth = 0;\n        this._onResize = util.debounce(\n            () => {\n                if (\n                    prevWidth != this.drawer.wrapper.clientWidth &&\n                    !this.params.scrollParent\n                ) {\n                    prevWidth = this.drawer.wrapper.clientWidth;\n                    this.drawer.fireEvent('redraw');\n                }\n            },\n            typeof this.params.responsive === 'number'\n                ? this.params.responsive\n                : 100\n        );\n\n        return this;\n    }\n\n    /**\n     * Initialise the wave\n     *\n     * @example\n     * var wavesurfer = new WaveSurfer(params);\n     * wavesurfer.init();\n     * @return {this} The wavesurfer instance\n     */\n    init() {\n        this.registerPlugins(this.params.plugins);\n        this.createDrawer();\n        this.createBackend();\n        this.createPeakCache();\n        return this;\n    }\n\n    /**\n     * Add and initialise array of plugins (if `plugin.deferInit` is falsey),\n     * this function is called in the init function of wavesurfer\n     *\n     * @param {PluginDefinition[]} plugins An array of plugin definitions\n     * @emits {WaveSurfer#plugins-registered} Called with the array of plugin definitions\n     * @return {this} The wavesurfer instance\n     */\n    registerPlugins(plugins) {\n        // first instantiate all the plugins\n        plugins.forEach(plugin => this.addPlugin(plugin));\n\n        // now run the init functions\n        plugins.forEach(plugin => {\n            // call init function of the plugin if deferInit is falsey\n            // in that case you would manually use initPlugins()\n            if (!plugin.deferInit) {\n                this.initPlugin(plugin.name);\n            }\n        });\n        this.fireEvent('plugins-registered', plugins);\n        return this;\n    }\n\n    /**\n     * Get a map of plugin names that are currently initialised\n     *\n     * @example wavesurfer.getPlugins();\n     * @return {Object} Object with plugin names\n     */\n    getActivePlugins() {\n        return this.initialisedPluginList;\n    }\n\n    /**\n     * Add a plugin object to wavesurfer\n     *\n     * @param {PluginDefinition} plugin A plugin definition\n     * @emits {WaveSurfer#plugin-added} Called with the name of the plugin that was added\n     * @example wavesurfer.addPlugin(WaveSurfer.minimap());\n     * @return {this} The wavesurfer instance\n     */\n    addPlugin(plugin) {\n        if (!plugin.name) {\n            throw new Error('Plugin does not have a name!');\n        }\n        if (!plugin.instance) {\n            throw new Error(\n                `Plugin ${plugin.name} does not have an instance property!`\n            );\n        }\n\n        // staticProps properties are applied to wavesurfer instance\n        if (plugin.staticProps) {\n            Object.keys(plugin.staticProps).forEach(pluginStaticProp => {\n                /**\n                 * Properties defined in a plugin definition's `staticProps` property are added as\n                 * staticProps properties of the WaveSurfer instance\n                 */\n                this[pluginStaticProp] = plugin.staticProps[pluginStaticProp];\n            });\n        }\n\n        const Instance = plugin.instance;\n\n        // turn the plugin instance into an observer\n        const observerPrototypeKeys = Object.getOwnPropertyNames(\n            util.Observer.prototype\n        );\n        observerPrototypeKeys.forEach(key => {\n            Instance.prototype[key] = util.Observer.prototype[key];\n        });\n\n        /**\n         * Instantiated plugin classes are added as a property of the wavesurfer\n         * instance\n         * @type {Object}\n         */\n        this[plugin.name] = new Instance(plugin.params || {}, this);\n        this.fireEvent('plugin-added', plugin.name);\n        return this;\n    }\n\n    /**\n     * Initialise a plugin\n     *\n     * @param {string} name A plugin name\n     * @emits WaveSurfer#plugin-initialised\n     * @example wavesurfer.initPlugin('minimap');\n     * @return {this} The wavesurfer instance\n     */\n    initPlugin(name) {\n        if (!this[name]) {\n            throw new Error(`Plugin ${name} has not been added yet!`);\n        }\n        if (this.initialisedPluginList[name]) {\n            // destroy any already initialised plugins\n            this.destroyPlugin(name);\n        }\n        this[name].init();\n        this.initialisedPluginList[name] = true;\n        this.fireEvent('plugin-initialised', name);\n        return this;\n    }\n\n    /**\n     * Destroy a plugin\n     *\n     * @param {string} name A plugin name\n     * @emits WaveSurfer#plugin-destroyed\n     * @example wavesurfer.destroyPlugin('minimap');\n     * @returns {this} The wavesurfer instance\n     */\n    destroyPlugin(name) {\n        if (!this[name]) {\n            throw new Error(\n                `Plugin ${name} has not been added yet and cannot be destroyed!`\n            );\n        }\n        if (!this.initialisedPluginList[name]) {\n            throw new Error(\n                `Plugin ${name} is not active and cannot be destroyed!`\n            );\n        }\n        if (typeof this[name].destroy !== 'function') {\n            throw new Error(`Plugin ${name} does not have a destroy function!`);\n        }\n\n        this[name].destroy();\n        delete this.initialisedPluginList[name];\n        this.fireEvent('plugin-destroyed', name);\n        return this;\n    }\n\n    /**\n     * Destroy all initialised plugins. Convenience function to use when\n     * wavesurfer is removed\n     *\n     * @private\n     */\n    destroyAllPlugins() {\n        Object.keys(this.initialisedPluginList).forEach(name =>\n            this.destroyPlugin(name)\n        );\n    }\n\n    /**\n     * Create the drawer and draw the waveform\n     *\n     * @private\n     * @emits WaveSurfer#drawer-created\n     */\n    createDrawer() {\n        this.drawer = new this.Drawer(this.container, this.params);\n        this.drawer.init();\n        this.fireEvent('drawer-created', this.drawer);\n\n        if (this.params.responsive !== false) {\n            window.addEventListener('resize', this._onResize, true);\n            window.addEventListener('orientationchange', this._onResize, true);\n        }\n\n        this.drawer.on('redraw', () => {\n            this.drawBuffer();\n            this.drawer.progress(this.backend.getPlayedPercents());\n        });\n\n        // Click-to-seek\n        this.drawer.on('click', (e, progress) => {\n            setTimeout(() => this.seekTo(progress), 0);\n        });\n\n        // Relay the scroll event from the drawer\n        this.drawer.on('scroll', e => {\n            if (this.params.partialRender) {\n                this.drawBuffer();\n            }\n            this.fireEvent('scroll', e);\n        });\n    }\n\n    /**\n     * Create the backend\n     *\n     * @private\n     * @emits WaveSurfer#backend-created\n     */\n    createBackend() {\n        if (this.backend) {\n            this.backend.destroy();\n        }\n\n        this.backend = new this.Backend(this.params);\n        this.backend.init();\n        this.fireEvent('backend-created', this.backend);\n\n        this.backend.on('finish', () => {\n            this.drawer.progress(this.backend.getPlayedPercents());\n            this.fireEvent('finish');\n        });\n        this.backend.on('play', () => this.fireEvent('play'));\n        this.backend.on('pause', () => this.fireEvent('pause'));\n\n        this.backend.on('audioprocess', time => {\n            this.drawer.progress(this.backend.getPlayedPercents());\n            this.fireEvent('audioprocess', time);\n        });\n\n        // only needed for MediaElement and MediaElementWebAudio backend\n        if (\n            this.params.backend === 'MediaElement' ||\n            this.params.backend === 'MediaElementWebAudio'\n        ) {\n            this.backend.on('seek', () => {\n                this.drawer.progress(this.backend.getPlayedPercents());\n            });\n\n            this.backend.on('volume', () => {\n                let newVolume = this.getVolume();\n                this.fireEvent('volume', newVolume);\n\n                if (this.backend.isMuted !== this.isMuted) {\n                    this.isMuted = this.backend.isMuted;\n                    this.fireEvent('mute', this.isMuted);\n                }\n            });\n        }\n    }\n\n    /**\n     * Create the peak cache\n     *\n     * @private\n     */\n    createPeakCache() {\n        if (this.params.partialRender) {\n            this.peakCache = new PeakCache();\n        }\n    }\n\n    /**\n     * Get the duration of the audio clip\n     *\n     * @example const duration = wavesurfer.getDuration();\n     * @return {number} Duration in seconds\n     */\n    getDuration() {\n        return this.backend.getDuration();\n    }\n\n    /**\n     * Get the current playback position\n     *\n     * @example const currentTime = wavesurfer.getCurrentTime();\n     * @return {number} Playback position in seconds\n     */\n    getCurrentTime() {\n        return this.backend.getCurrentTime();\n    }\n\n    /**\n     * Set the current play time in seconds.\n     *\n     * @param {number} seconds A positive number in seconds. E.g. 10 means 10\n     * seconds, 60 means 1 minute\n     */\n    setCurrentTime(seconds) {\n        if (seconds >= this.getDuration()) {\n            this.seekTo(1);\n        } else {\n            this.seekTo(seconds / this.getDuration());\n        }\n    }\n\n    /**\n     * Starts playback from the current position. Optional start and end\n     * measured in seconds can be used to set the range of audio to play.\n     *\n     * @param {?number} start Position to start at\n     * @param {?number} end Position to end at\n     * @emits WaveSurfer#interaction\n     * @return {Promise} Result of the backend play method\n     * @example\n     * // play from second 1 to 5\n     * wavesurfer.play(1, 5);\n     */\n    play(start, end) {\n        if (this.params.ignoreSilenceMode) {\n            // ignores device hardware silence mode\n            util.ignoreSilenceMode();\n        }\n\n        this.fireEvent('interaction', () => this.play(start, end));\n        return this.backend.play(start, end);\n    }\n\n    /**\n     * Set a point in seconds for playback to stop at.\n     *\n     * @param {number} position Position (in seconds) to stop at\n     * @version 3.3.0\n     */\n    setPlayEnd(position) {\n        this.backend.setPlayEnd(position);\n    }\n\n    /**\n     * Stops and pauses playback\n     *\n     * @example wavesurfer.pause();\n     * @return {Promise} Result of the backend pause method\n     */\n    pause() {\n        if (!this.backend.isPaused()) {\n            return this.backend.pause();\n        }\n    }\n\n    /**\n     * Toggle playback\n     *\n     * @example wavesurfer.playPause();\n     * @return {Promise} Result of the backend play or pause method\n     */\n    playPause() {\n        return this.backend.isPaused() ? this.play() : this.pause();\n    }\n\n    /**\n     * Get the current playback state\n     *\n     * @example const isPlaying = wavesurfer.isPlaying();\n     * @return {boolean} False if paused, true if playing\n     */\n    isPlaying() {\n        return !this.backend.isPaused();\n    }\n\n    /**\n     * Skip backward\n     *\n     * @param {?number} seconds Amount to skip back, if not specified `skipLength`\n     * is used\n     * @example wavesurfer.skipBackward();\n     */\n    skipBackward(seconds) {\n        this.skip(-seconds || -this.params.skipLength);\n    }\n\n    /**\n     * Skip forward\n     *\n     * @param {?number} seconds Amount to skip back, if not specified `skipLength`\n     * is used\n     * @example wavesurfer.skipForward();\n     */\n    skipForward(seconds) {\n        this.skip(seconds || this.params.skipLength);\n    }\n\n    /**\n     * Skip a number of seconds from the current position (use a negative value\n     * to go backwards).\n     *\n     * @param {number} offset Amount to skip back or forwards\n     * @example\n     * // go back 2 seconds\n     * wavesurfer.skip(-2);\n     */\n    skip(offset) {\n        const duration = this.getDuration() || 1;\n        let position = this.getCurrentTime() || 0;\n        position = Math.max(0, Math.min(duration, position + (offset || 0)));\n        this.seekAndCenter(position / duration);\n    }\n\n    /**\n     * Seeks to a position and centers the view\n     *\n     * @param {number} progress Between 0 (=beginning) and 1 (=end)\n     * @example\n     * // seek and go to the middle of the audio\n     * wavesurfer.seekTo(0.5);\n     */\n    seekAndCenter(progress) {\n        this.seekTo(progress);\n        this.drawer.recenter(progress);\n    }\n\n    /**\n     * Seeks to a position\n     *\n     * @param {number} progress Between 0 (=beginning) and 1 (=end)\n     * @emits WaveSurfer#interaction\n     * @emits WaveSurfer#seek\n     * @example\n     * // seek to the middle of the audio\n     * wavesurfer.seekTo(0.5);\n     */\n    seekTo(progress) {\n        // return an error if progress is not a number between 0 and 1\n        if (\n            typeof progress !== 'number' ||\n            !isFinite(progress) ||\n            progress < 0 ||\n            progress > 1\n        ) {\n            throw new Error(\n                'Error calling wavesurfer.seekTo, parameter must be a number between 0 and 1!'\n            );\n        }\n        this.fireEvent('interaction', () => this.seekTo(progress));\n\n        const isWebAudioBackend = this.params.backend === 'WebAudio';\n        const paused = this.backend.isPaused();\n\n        if (isWebAudioBackend && !paused) {\n            this.backend.pause();\n        }\n\n        // avoid small scrolls while paused seeking\n        const oldScrollParent = this.params.scrollParent;\n        this.params.scrollParent = false;\n        this.backend.seekTo(progress * this.getDuration());\n        this.drawer.progress(progress);\n\n        if (isWebAudioBackend && !paused) {\n            this.backend.play();\n        }\n\n        this.params.scrollParent = oldScrollParent;\n        this.fireEvent('seek', progress);\n    }\n\n    /**\n     * Stops and goes to the beginning.\n     *\n     * @example wavesurfer.stop();\n     */\n    stop() {\n        this.pause();\n        this.seekTo(0);\n        this.drawer.progress(0);\n    }\n\n    /**\n     * Sets the ID of the audio device to use for output and returns a Promise.\n     *\n     * @param {string} deviceId String value representing underlying output\n     * device\n     * @returns {Promise} `Promise` that resolves to `undefined` when there are\n     * no errors detected.\n     */\n    setSinkId(deviceId) {\n        return this.backend.setSinkId(deviceId);\n    }\n\n    /**\n     * Set the playback volume.\n     *\n     * @param {number} newVolume A value between 0 and 1, 0 being no\n     * volume and 1 being full volume.\n     * @emits WaveSurfer#volume\n     */\n    setVolume(newVolume) {\n        this.backend.setVolume(newVolume);\n        this.fireEvent('volume', newVolume);\n    }\n\n    /**\n     * Get the playback volume.\n     *\n     * @return {number} A value between 0 and 1, 0 being no\n     * volume and 1 being full volume.\n     */\n    getVolume() {\n        return this.backend.getVolume();\n    }\n\n    /**\n     * Set the playback rate.\n     *\n     * @param {number} rate A positive number. E.g. 0.5 means half the normal\n     * speed, 2 means double speed and so on.\n     * @example wavesurfer.setPlaybackRate(2);\n     */\n    setPlaybackRate(rate) {\n        this.backend.setPlaybackRate(rate);\n    }\n\n    /**\n     * Get the playback rate.\n     *\n     * @return {number} The current playback rate.\n     */\n    getPlaybackRate() {\n        return this.backend.getPlaybackRate();\n    }\n\n    /**\n     * Toggle the volume on and off. If not currently muted it will save the\n     * current volume value and turn the volume off. If currently muted then it\n     * will restore the volume to the saved value, and then rest the saved\n     * value.\n     *\n     * @example wavesurfer.toggleMute();\n     */\n    toggleMute() {\n        this.setMute(!this.isMuted);\n    }\n\n    /**\n     * Enable or disable muted audio\n     *\n     * @param {boolean} mute Specify `true` to mute audio.\n     * @emits WaveSurfer#volume\n     * @emits WaveSurfer#mute\n     * @example\n     * // unmute\n     * wavesurfer.setMute(false);\n     * console.log(wavesurfer.getMute()) // logs false\n     */\n    setMute(mute) {\n        // ignore all muting requests if the audio is already in that state\n        if (mute === this.isMuted) {\n            this.fireEvent('mute', this.isMuted);\n            return;\n        }\n\n        if (this.backend.setMute) {\n            // Backends such as the MediaElement backend have their own handling\n            // of mute, let them handle it.\n            this.backend.setMute(mute);\n            this.isMuted = mute;\n        } else {\n            if (mute) {\n                // If currently not muted then save current volume,\n                // turn off the volume and update the mute properties\n                this.savedVolume = this.backend.getVolume();\n                this.backend.setVolume(0);\n                this.isMuted = true;\n                this.fireEvent('volume', 0);\n            } else {\n                // If currently muted then restore to the saved volume\n                // and update the mute properties\n                this.backend.setVolume(this.savedVolume);\n                this.isMuted = false;\n                this.fireEvent('volume', this.savedVolume);\n            }\n        }\n        this.fireEvent('mute', this.isMuted);\n    }\n\n    /**\n     * Get the current mute status.\n     *\n     * @example const isMuted = wavesurfer.getMute();\n     * @return {boolean} Current mute status\n     */\n    getMute() {\n        return this.isMuted;\n    }\n\n    /**\n     * Get the list of current set filters as an array.\n     *\n     * Filters must be set with setFilters method first\n     *\n     * @return {array} List of enabled filters\n     */\n    getFilters() {\n        return this.backend.filters || [];\n    }\n\n    /**\n     * Toggles `scrollParent` and redraws\n     *\n     * @example wavesurfer.toggleScroll();\n     */\n    toggleScroll() {\n        this.params.scrollParent = !this.params.scrollParent;\n        this.drawBuffer();\n    }\n\n    /**\n     * Toggle mouse interaction\n     *\n     * @example wavesurfer.toggleInteraction();\n     */\n    toggleInteraction() {\n        this.params.interact = !this.params.interact;\n    }\n\n    /**\n     * Get the fill color of the waveform after the cursor.\n     *\n     * @return {string} A CSS color string.\n     */\n    getWaveColor() {\n        return this.params.waveColor;\n    }\n\n    /**\n     * Set the fill color of the waveform after the cursor.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setWaveColor('#ddd');\n     */\n    setWaveColor(color) {\n        this.params.waveColor = color;\n        this.drawBuffer();\n    }\n\n    /**\n     * Get the fill color of the waveform behind the cursor.\n     *\n     * @return {string} A CSS color string.\n     */\n    getProgressColor() {\n        return this.params.progressColor;\n    }\n\n    /**\n     * Set the fill color of the waveform behind the cursor.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setProgressColor('#400');\n     */\n    setProgressColor(color) {\n        this.params.progressColor = color;\n        this.drawBuffer();\n    }\n\n    /**\n     * Get the background color of the waveform container.\n     *\n     * @return {string} A CSS color string.\n     */\n    getBackgroundColor() {\n        return this.params.backgroundColor;\n    }\n\n    /**\n     * Set the background color of the waveform container.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setBackgroundColor('#FF00FF');\n     */\n    setBackgroundColor(color) {\n        this.params.backgroundColor = color;\n        util.style(this.container, { background: this.params.backgroundColor });\n    }\n\n    /**\n     * Get the fill color of the cursor indicating the playhead\n     * position.\n     *\n     * @return {string} A CSS color string.\n     */\n    getCursorColor() {\n        return this.params.cursorColor;\n    }\n\n    /**\n     * Set the fill color of the cursor indicating the playhead\n     * position.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setCursorColor('#222');\n     */\n    setCursorColor(color) {\n        this.params.cursorColor = color;\n        this.drawer.updateCursor();\n    }\n\n    /**\n     * Get the height of the waveform.\n     *\n     * @return {number} Height measured in pixels.\n     */\n    getHeight() {\n        return this.params.height;\n    }\n\n    /**\n     * Set the height of the waveform.\n     *\n     * @param {number} height Height measured in pixels.\n     * @example wavesurfer.setHeight(200);\n     */\n    setHeight(height) {\n        this.params.height = height;\n        this.drawer.setHeight(height * this.params.pixelRatio);\n        this.drawBuffer();\n    }\n\n    /**\n     * Hide channels from being drawn on the waveform if splitting channels.\n     *\n     * For example, if we want to draw only the peaks for the right stereo channel:\n     *\n     * const wavesurfer = new WaveSurfer.create({...splitChannels: true});\n     * wavesurfer.load('stereo_audio.mp3');\n     *\n     * wavesurfer.setFilteredChannel([0]); <-- hide left channel peaks.\n     *\n     * @param {array} channelIndices Channels to be filtered out from drawing.\n     * @version 4.0.0\n     */\n    setFilteredChannels(channelIndices) {\n        this.params.splitChannelsOptions.filterChannels = channelIndices;\n        this.drawBuffer();\n    }\n\n    /**\n     * Get the correct peaks for current wave view-port and render wave\n     *\n     * @private\n     * @emits WaveSurfer#redraw\n     */\n    drawBuffer() {\n        const nominalWidth = Math.round(\n            this.getDuration() *\n                this.params.minPxPerSec *\n                this.params.pixelRatio\n        );\n        const parentWidth = this.drawer.getWidth();\n        let width = nominalWidth;\n        // always start at 0 after zooming for scrolling : issue redraw left part\n        let start = 0;\n        let end = Math.max(start + parentWidth, width);\n        // Fill container\n        if (\n            this.params.fillParent &&\n            (!this.params.scrollParent || nominalWidth < parentWidth)\n        ) {\n            width = parentWidth;\n            start = 0;\n            end = width;\n        }\n\n        let peaks;\n        if (this.params.partialRender) {\n            const newRanges = this.peakCache.addRangeToPeakCache(\n                width,\n                start,\n                end\n            );\n            let i;\n            for (i = 0; i < newRanges.length; i++) {\n                peaks = this.backend.getPeaks(\n                    width,\n                    newRanges[i][0],\n                    newRanges[i][1]\n                );\n                this.drawer.drawPeaks(\n                    peaks,\n                    width,\n                    newRanges[i][0],\n                    newRanges[i][1]\n                );\n            }\n        } else {\n            peaks = this.backend.getPeaks(width, start, end);\n            this.drawer.drawPeaks(peaks, width, start, end);\n        }\n        this.fireEvent('redraw', peaks, width);\n    }\n\n    /**\n     * Horizontally zooms the waveform in and out. It also changes the parameter\n     * `minPxPerSec` and enables the `scrollParent` option. Calling the function\n     * with a falsey parameter will reset the zoom state.\n     *\n     * @param {?number} pxPerSec Number of horizontal pixels per second of\n     * audio, if none is set the waveform returns to unzoomed state\n     * @emits WaveSurfer#zoom\n     * @example wavesurfer.zoom(20);\n     */\n    zoom(pxPerSec) {\n        if (!pxPerSec) {\n            this.params.minPxPerSec = this.defaultParams.minPxPerSec;\n            this.params.scrollParent = false;\n        } else {\n            this.params.minPxPerSec = pxPerSec;\n            this.params.scrollParent = true;\n        }\n\n        this.drawBuffer();\n        this.drawer.progress(this.backend.getPlayedPercents());\n\n        this.drawer.recenter(this.getCurrentTime() / this.getDuration());\n        this.fireEvent('zoom', pxPerSec);\n    }\n\n    /**\n     * Decode buffer and load\n     *\n     * @private\n     * @param {ArrayBuffer} arraybuffer Buffer to process\n     */\n    loadArrayBuffer(arraybuffer) {\n        this.decodeArrayBuffer(arraybuffer, data => {\n            if (!this.isDestroyed) {\n                this.loadDecodedBuffer(data);\n            }\n        });\n    }\n\n    /**\n     * Directly load an externally decoded AudioBuffer\n     *\n     * @private\n     * @param {AudioBuffer} buffer Buffer to process\n     * @emits WaveSurfer#ready\n     */\n    loadDecodedBuffer(buffer) {\n        this.backend.load(buffer);\n        this.drawBuffer();\n        this.isReady = true;\n        this.fireEvent('ready');\n    }\n\n    /**\n     * Loads audio data from a Blob or File object\n     *\n     * @param {Blob|File} blob Audio data\n     * @example\n     */\n    loadBlob(blob) {\n        // Create file reader\n        const reader = new FileReader();\n        reader.addEventListener('progress', e => this.onProgress(e));\n        reader.addEventListener('load', e =>\n            this.loadArrayBuffer(e.target.result)\n        );\n        reader.addEventListener('error', () =>\n            this.fireEvent('error', 'Error reading file')\n        );\n        reader.readAsArrayBuffer(blob);\n        this.empty();\n    }\n\n    /**\n     * Loads audio and re-renders the waveform.\n     *\n     * @param {string|HTMLMediaElement} url The url of the audio file or the\n     * audio element with the audio\n     * @param {number[]|Number.<Array[]>} peaks Wavesurfer does not have to decode\n     * the audio to render the waveform if this is specified\n     * @param {?string} preload (Use with backend `MediaElement` and `MediaElementWebAudio`)\n     * `'none'|'metadata'|'auto'` Preload attribute for the media element\n     * @param {?number} duration The duration of the audio. This is used to\n     * render the peaks data in the correct size for the audio duration (as\n     * befits the current `minPxPerSec` and zoom value) without having to decode\n     * the audio.\n     * @returns {void}\n     * @throws Will throw an error if the `url` argument is empty.\n     * @example\n     * // uses fetch or media element to load file (depending on backend)\n     * wavesurfer.load('http://example.com/demo.wav');\n     *\n     * // setting preload attribute with media element backend and supplying\n     * // peaks\n     * wavesurfer.load(\n     *   'http://example.com/demo.wav',\n     *   [0.0218, 0.0183, 0.0165, 0.0198, 0.2137, 0.2888],\n     *   true\n     * );\n     */\n    load(url, peaks, preload, duration) {\n        if (!url) {\n            throw new Error('url parameter cannot be empty');\n        }\n        this.empty();\n        if (preload) {\n            // check whether the preload attribute will be usable and if not log\n            // a warning listing the reasons why not and nullify the variable\n            const preloadIgnoreReasons = {\n                \"Preload is not 'auto', 'none' or 'metadata'\":\n                    ['auto', 'metadata', 'none'].indexOf(preload) === -1,\n                'Peaks are not provided': !peaks,\n                \"Backend is not of type 'MediaElement' or 'MediaElementWebAudio'\":\n                    ['MediaElement', 'MediaElementWebAudio'].indexOf(\n                        this.params.backend\n                    ) === -1,\n                'Url is not of type string': typeof url !== 'string'\n            };\n            const activeReasons = Object.keys(preloadIgnoreReasons).filter(\n                reason => preloadIgnoreReasons[reason]\n            );\n            if (activeReasons.length) {\n                // eslint-disable-next-line no-console\n                console.warn(\n                    'Preload parameter of wavesurfer.load will be ignored because:\\n\\t- ' +\n                        activeReasons.join('\\n\\t- ')\n                );\n                // stop invalid values from being used\n                preload = null;\n            }\n        }\n\n        // loadBuffer(url, peaks, duration) requires that url is a string\n        // but users can pass in a HTMLMediaElement to WaveSurfer\n        if (this.params.backend === 'WebAudio' && url instanceof HTMLMediaElement) {\n            url = url.src;\n        }\n\n        switch (this.params.backend) {\n            case 'WebAudio':\n                return this.loadBuffer(url, peaks, duration);\n            case 'MediaElement':\n            case 'MediaElementWebAudio':\n                return this.loadMediaElement(url, peaks, preload, duration);\n        }\n    }\n\n    /**\n     * Loads audio using Web Audio buffer backend.\n     *\n     * @private\n     * @emits WaveSurfer#waveform-ready\n     * @param {string} url URL of audio file\n     * @param {number[]|Number.<Array[]>} peaks Peaks data\n     * @param {?number} duration Optional duration of audio file\n     * @returns {void}\n     */\n    loadBuffer(url, peaks, duration) {\n        const load = action => {\n            if (action) {\n                this.tmpEvents.push(this.once('ready', action));\n            }\n            return this.getArrayBuffer(url, data => this.loadArrayBuffer(data));\n        };\n\n        if (peaks) {\n            this.backend.setPeaks(peaks, duration);\n            this.drawBuffer();\n            this.fireEvent('waveform-ready');\n            this.tmpEvents.push(this.once('interaction', load));\n        } else {\n            return load();\n        }\n    }\n\n    /**\n     * Either create a media element, or load an existing media element.\n     *\n     * @private\n     * @emits WaveSurfer#waveform-ready\n     * @param {string|HTMLMediaElement} urlOrElt Either a path to a media file, or an\n     * existing HTML5 Audio/Video Element\n     * @param {number[]|Number.<Array[]>} peaks Array of peaks. Required to bypass web audio\n     * dependency\n     * @param {?boolean} preload Set to true if the preload attribute of the\n     * audio element should be enabled\n     * @param {?number} duration Optional duration of audio file\n     */\n    loadMediaElement(urlOrElt, peaks, preload, duration) {\n        let url = urlOrElt;\n\n        if (typeof urlOrElt === 'string') {\n            this.backend.load(url, this.mediaContainer, peaks, preload);\n        } else {\n            const elt = urlOrElt;\n            this.backend.loadElt(elt, peaks);\n\n            // If peaks are not provided,\n            // url = element.src so we can get peaks with web audio\n            url = elt.src;\n        }\n\n        this.tmpEvents.push(\n            this.backend.once('canplay', () => {\n                // ignore when backend was already destroyed\n                if (!this.backend.destroyed) {\n                    this.drawBuffer();\n                    this.isReady = true;\n                    this.fireEvent('ready');\n                }\n            }),\n            this.backend.once('error', err => this.fireEvent('error', err))\n        );\n\n        // If peaks are provided, render them and fire the `waveform-ready` event.\n        if (peaks) {\n            this.backend.setPeaks(peaks, duration);\n            this.drawBuffer();\n            this.fireEvent('waveform-ready');\n        }\n\n        // If no pre-decoded peaks are provided, or are provided with\n        // forceDecode flag, attempt to download the audio file and decode it\n        // with Web Audio.\n        if (\n            (!peaks || this.params.forceDecode) &&\n            this.backend.supportsWebAudio()\n        ) {\n            this.getArrayBuffer(url, arraybuffer => {\n                this.decodeArrayBuffer(arraybuffer, buffer => {\n                    this.backend.buffer = buffer;\n                    this.backend.setPeaks(null);\n                    this.drawBuffer();\n                    this.fireEvent('waveform-ready');\n                });\n            });\n        }\n    }\n\n    /**\n     * Decode an array buffer and pass data to a callback\n     *\n     * @private\n     * @param {Object} arraybuffer The array buffer to decode\n     * @param {function} callback The function to call on complete\n     */\n    decodeArrayBuffer(arraybuffer, callback) {\n        if (!this.isDestroyed) {\n            this.arraybuffer = arraybuffer;\n            this.backend.decodeArrayBuffer(\n                arraybuffer,\n                data => {\n                    // Only use the decoded data if we haven't been destroyed or\n                    // another decode started in the meantime\n                    if (!this.isDestroyed && this.arraybuffer == arraybuffer) {\n                        callback(data);\n                        this.arraybuffer = null;\n                    }\n                },\n                () => this.fireEvent('error', 'Error decoding audiobuffer')\n            );\n        }\n    }\n\n    /**\n     * Load an array buffer using fetch and pass the result to a callback\n     *\n     * @param {string} url The URL of the file object\n     * @param {function} callback The function to call on complete\n     * @returns {util.fetchFile} fetch call\n     * @private\n     */\n    getArrayBuffer(url, callback) {\n        let options = Object.assign(\n            {\n                url: url,\n                responseType: 'arraybuffer'\n            },\n            this.params.xhr\n        );\n        const request = util.fetchFile(options);\n\n        this.currentRequest = request;\n\n        this.tmpEvents.push(\n            request.on('progress', e => {\n                this.onProgress(e);\n            }),\n            request.on('success', data => {\n                callback(data);\n                this.currentRequest = null;\n            }),\n            request.on('error', e => {\n                this.fireEvent('error', e);\n                this.currentRequest = null;\n            })\n        );\n\n        return request;\n    }\n\n    /**\n     * Called while the audio file is loading\n     *\n     * @private\n     * @param {Event} e Progress event\n     * @emits WaveSurfer#loading\n     */\n    onProgress(e) {\n        let percentComplete;\n        if (e.lengthComputable) {\n            percentComplete = e.loaded / e.total;\n        } else {\n            // Approximate progress with an asymptotic\n            // function, and assume downloads in the 1-3 MB range.\n            percentComplete = e.loaded / (e.loaded + 1000000);\n        }\n        this.fireEvent('loading', Math.round(percentComplete * 100), e.target);\n    }\n\n    /**\n     * Exports PCM data into a JSON array and optionally opens in a new window\n     * as valid JSON Blob instance.\n     *\n     * @param {number} length=1024 The scale in which to export the peaks\n     * @param {number} accuracy=10000\n     * @param {?boolean} noWindow Set to true to disable opening a new\n     * window with the JSON\n     * @param {number} start Start index\n     * @param {number} end End index\n     * @return {Promise} Promise that resolves with array of peaks\n     */\n    exportPCM(length, accuracy, noWindow, start, end) {\n        length = length || 1024;\n        start = start || 0;\n        accuracy = accuracy || 10000;\n        noWindow = noWindow || false;\n        const peaks = this.backend.getPeaks(length, start, end);\n        const arr = [].map.call(\n            peaks,\n            val => Math.round(val * accuracy) / accuracy\n        );\n\n        return new Promise((resolve, reject) => {\n            if (!noWindow){\n                const blobJSON = new Blob(\n                    [JSON.stringify(arr)],\n                    {type: 'application/json;charset=utf-8'}\n                );\n                const objURL = URL.createObjectURL(blobJSON);\n                window.open(objURL);\n                URL.revokeObjectURL(objURL);\n            }\n            resolve(arr);\n        });\n    }\n\n    /**\n     * Save waveform image as data URI.\n     *\n     * The default format is `'image/png'`. Other supported types are\n     * `'image/jpeg'` and `'image/webp'`.\n     *\n     * @param {string} format='image/png' A string indicating the image format.\n     * The default format type is `'image/png'`.\n     * @param {number} quality=1 A number between 0 and 1 indicating the image\n     * quality to use for image formats that use lossy compression such as\n     * `'image/jpeg'`` and `'image/webp'`.\n     * @param {string} type Image data type to return. Either 'dataURL' (default)\n     * or 'blob'.\n     * @return {string|string[]|Promise} When using `'dataURL'` type this returns\n     * a single data URL or an array of data URLs, one for each canvas. When using\n     * `'blob'` type this returns a `Promise` resolving with an array of `Blob`\n     * instances, one for each canvas.\n     */\n    exportImage(format, quality, type) {\n        if (!format) {\n            format = 'image/png';\n        }\n        if (!quality) {\n            quality = 1;\n        }\n        if (!type) {\n            type = 'dataURL';\n        }\n\n        return this.drawer.getImage(format, quality, type);\n    }\n\n    /**\n     * Cancel any fetch request currently in progress\n     */\n    cancelAjax() {\n        if (this.currentRequest && this.currentRequest.controller) {\n            // If the current request has a ProgressHandler, then its ReadableStream might need to be cancelled too\n            // See: Wavesurfer issue #2042\n            // See Firefox bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1583815\n            if (this.currentRequest._reader) {\n                // Ignoring exceptions thrown by call to cancel()\n                this.currentRequest._reader.cancel().catch(err => {});\n            }\n\n            this.currentRequest.controller.abort();\n            this.currentRequest = null;\n        }\n    }\n\n    /**\n     * @private\n     */\n    clearTmpEvents() {\n        this.tmpEvents.forEach(e => e.un());\n    }\n\n    /**\n     * Display empty waveform.\n     */\n    empty() {\n        if (!this.backend.isPaused()) {\n            this.stop();\n            this.backend.disconnectSource();\n        }\n        this.isReady = false;\n        this.cancelAjax();\n        this.clearTmpEvents();\n\n        // empty drawer\n        this.drawer.progress(0);\n        this.drawer.setWidth(0);\n        this.drawer.drawPeaks({ length: this.drawer.getWidth() }, 0);\n    }\n\n    /**\n     * Remove events, elements and disconnect WebAudio nodes.\n     *\n     * @emits WaveSurfer#destroy\n     */\n    destroy() {\n        this.destroyAllPlugins();\n        this.fireEvent('destroy');\n        this.cancelAjax();\n        this.clearTmpEvents();\n        this.unAll();\n        if (this.params.responsive !== false) {\n            window.removeEventListener('resize', this._onResize, true);\n            window.removeEventListener(\n                'orientationchange',\n                this._onResize,\n                true\n            );\n        }\n        if (this.backend) {\n            this.backend.destroy();\n            // clears memory usage\n            this.backend = null;\n        }\n        if (this.drawer) {\n            this.drawer.destroy();\n        }\n        this.isDestroyed = true;\n        this.isReady = false;\n        this.arraybuffer = null;\n    }\n}\n","import * as util from './util';\n\n// using constants to prevent someone writing the string wrong\nconst PLAYING = 'playing';\nconst PAUSED = 'paused';\nconst FINISHED = 'finished';\n\n/**\n * WebAudio backend\n *\n * @extends {Observer}\n */\nexport default class WebAudio extends util.Observer {\n    /** scriptBufferSize: size of the processing buffer */\n    static scriptBufferSize = 256;\n    /** audioContext: allows to process audio with WebAudio API */\n    audioContext = null;\n    /** @private */\n    offlineAudioContext = null;\n    /** @private */\n    stateBehaviors = {\n        [PLAYING]: {\n            init() {\n                this.addOnAudioProcess();\n            },\n            getPlayedPercents() {\n                const duration = this.getDuration();\n                return this.getCurrentTime() / duration || 0;\n            },\n            getCurrentTime() {\n                return this.startPosition + this.getPlayedTime();\n            }\n        },\n        [PAUSED]: {\n            init() {\n                this.removeOnAudioProcess();\n            },\n            getPlayedPercents() {\n                const duration = this.getDuration();\n                return this.getCurrentTime() / duration || 0;\n            },\n            getCurrentTime() {\n                return this.startPosition;\n            }\n        },\n        [FINISHED]: {\n            init() {\n                this.removeOnAudioProcess();\n                this.fireEvent('finish');\n            },\n            getPlayedPercents() {\n                return 1;\n            },\n            getCurrentTime() {\n                return this.getDuration();\n            }\n        }\n    };\n\n    /**\n     * Does the browser support this backend\n     *\n     * @return {boolean} Whether or not this browser supports this backend\n     */\n    supportsWebAudio() {\n        return !!(window.AudioContext || window.webkitAudioContext);\n    }\n\n    /**\n     * Get the audio context used by this backend or create one\n     *\n     * @return {AudioContext} Existing audio context, or creates a new one\n     */\n    getAudioContext() {\n        if (!window.WaveSurferAudioContext) {\n            window.WaveSurferAudioContext = new (window.AudioContext ||\n                window.webkitAudioContext)();\n        }\n        return window.WaveSurferAudioContext;\n    }\n\n    /**\n     * Get the offline audio context used by this backend or create one\n     *\n     * @param {number} sampleRate The sample rate to use\n     * @return {OfflineAudioContext} Existing offline audio context, or creates\n     * a new one\n     */\n    getOfflineAudioContext(sampleRate) {\n        if (!window.WaveSurferOfflineAudioContext) {\n            window.WaveSurferOfflineAudioContext = new (window.OfflineAudioContext ||\n                window.webkitOfflineAudioContext)(1, 2, sampleRate);\n        }\n        return window.WaveSurferOfflineAudioContext;\n    }\n\n    /**\n     * Construct the backend\n     *\n     * @param {WavesurferParams} params Wavesurfer parameters\n     */\n    constructor(params) {\n        super();\n        /** @private */\n        this.params = params;\n        /** ac: Audio Context instance */\n        this.ac =\n            params.audioContext ||\n            (this.supportsWebAudio() ? this.getAudioContext() : {});\n        /**@private */\n        this.lastPlay = this.ac.currentTime;\n        /** @private */\n        this.startPosition = 0;\n        /** @private */\n        this.scheduledPause = null;\n        /** @private */\n        this.states = {\n            [PLAYING]: Object.create(this.stateBehaviors[PLAYING]),\n            [PAUSED]: Object.create(this.stateBehaviors[PAUSED]),\n            [FINISHED]: Object.create(this.stateBehaviors[FINISHED])\n        };\n        /** @private */\n        this.buffer = null;\n        /** @private */\n        this.filters = [];\n        /** gainNode: allows to control audio volume */\n        this.gainNode = null;\n        /** @private */\n        this.mergedPeaks = null;\n        /** @private */\n        this.offlineAc = null;\n        /** @private */\n        this.peaks = null;\n        /** @private */\n        this.playbackRate = 1;\n        /** analyser: provides audio analysis information */\n        this.analyser = null;\n        /** scriptNode: allows processing audio */\n        this.scriptNode = null;\n        /** @private */\n        this.source = null;\n        /** @private */\n        this.splitPeaks = [];\n        /** @private */\n        this.state = null;\n        /** @private */\n        this.explicitDuration = params.duration;\n        /**\n         * Boolean indicating if the backend was destroyed.\n         */\n        this.destroyed = false;\n    }\n\n    /**\n     * Initialise the backend, called in `wavesurfer.createBackend()`\n     */\n    init() {\n        this.createVolumeNode();\n        this.createScriptNode();\n        this.createAnalyserNode();\n\n        this.setState(PAUSED);\n        this.setPlaybackRate(this.params.audioRate);\n        this.setLength(0);\n    }\n\n    /** @private */\n    disconnectFilters() {\n        if (this.filters) {\n            this.filters.forEach(filter => {\n                filter && filter.disconnect();\n            });\n            this.filters = null;\n            // Reconnect direct path\n            this.analyser.connect(this.gainNode);\n        }\n    }\n\n    /**\n     * @private\n     *\n     * @param {string} state The new state\n     */\n    setState(state) {\n        if (this.state !== this.states[state]) {\n            this.state = this.states[state];\n            this.state.init.call(this);\n        }\n    }\n\n    /**\n     * Unpacked `setFilters()`\n     *\n     * @param {...AudioNode} filters One or more filters to set\n     */\n    setFilter(...filters) {\n        this.setFilters(filters);\n    }\n\n    /**\n     * Insert custom Web Audio nodes into the graph\n     *\n     * @param {AudioNode[]} filters Packed filters array\n     * @example\n     * const lowpass = wavesurfer.backend.ac.createBiquadFilter();\n     * wavesurfer.backend.setFilter(lowpass);\n     */\n    setFilters(filters) {\n        // Remove existing filters\n        this.disconnectFilters();\n\n        // Insert filters if filter array not empty\n        if (filters && filters.length) {\n            this.filters = filters;\n\n            // Disconnect direct path before inserting filters\n            this.analyser.disconnect();\n\n            // Connect each filter in turn\n            filters\n                .reduce((prev, curr) => {\n                    prev.connect(curr);\n                    return curr;\n                }, this.analyser)\n                .connect(this.gainNode);\n        }\n    }\n    /** Create ScriptProcessorNode to process audio */\n    createScriptNode() {\n        if (this.params.audioScriptProcessor) {\n            this.scriptNode = this.params.audioScriptProcessor;\n        } else {\n            if (this.ac.createScriptProcessor) {\n                this.scriptNode = this.ac.createScriptProcessor(\n                    WebAudio.scriptBufferSize\n                );\n            } else {\n                this.scriptNode = this.ac.createJavaScriptNode(\n                    WebAudio.scriptBufferSize\n                );\n            }\n        }\n        this.scriptNode.connect(this.ac.destination);\n    }\n\n    /** @private */\n    addOnAudioProcess() {\n        this.scriptNode.onaudioprocess = () => {\n            const time = this.getCurrentTime();\n\n            if (time >= this.getDuration()) {\n                this.setState(FINISHED);\n                this.fireEvent('pause');\n            } else if (time >= this.scheduledPause) {\n                this.pause();\n            } else if (this.state === this.states[PLAYING]) {\n                this.fireEvent('audioprocess', time);\n            }\n        };\n    }\n\n    /** @private */\n    removeOnAudioProcess() {\n        this.scriptNode.onaudioprocess = null;\n    }\n    /** Create analyser node to perform audio analysis */\n    createAnalyserNode() {\n        this.analyser = this.ac.createAnalyser();\n        this.analyser.connect(this.gainNode);\n    }\n\n    /**\n     * Create the gain node needed to control the playback volume.\n     *\n     */\n    createVolumeNode() {\n        // Create gain node using the AudioContext\n        if (this.ac.createGain) {\n            this.gainNode = this.ac.createGain();\n        } else {\n            this.gainNode = this.ac.createGainNode();\n        }\n        // Add the gain node to the graph\n        this.gainNode.connect(this.ac.destination);\n    }\n\n    /**\n     * Set the sink id for the media player\n     *\n     * @param {string} deviceId String value representing audio device id.\n     * @returns {Promise} A Promise that resolves to `undefined` when there\n     * are no errors.\n     */\n    setSinkId(deviceId) {\n        if (deviceId) {\n            /**\n             * The webaudio API doesn't currently support setting the device\n             * output. Here we create an HTMLAudioElement, connect the\n             * webaudio stream to that element and setSinkId there.\n             */\n            let audio = new window.Audio();\n            if (!audio.setSinkId) {\n                return Promise.reject(\n                    new Error('setSinkId is not supported in your browser')\n                );\n            }\n            audio.autoplay = true;\n            const dest = this.ac.createMediaStreamDestination();\n            this.gainNode.disconnect();\n            this.gainNode.connect(dest);\n            audio.srcObject = dest.stream;\n\n            return audio.setSinkId(deviceId);\n        } else {\n            return Promise.reject(new Error('Invalid deviceId: ' + deviceId));\n        }\n    }\n\n    /**\n     * Set the audio volume\n     *\n     * @param {number} value A floating point value between 0 and 1.\n     */\n    setVolume(value) {\n        this.gainNode.gain.setValueAtTime(value, this.ac.currentTime);\n    }\n\n    /**\n     * Get the current volume\n     *\n     * @return {number} value A floating point value between 0 and 1.\n     */\n    getVolume() {\n        return this.gainNode.gain.value;\n    }\n\n    /**\n     * Decode an array buffer and pass data to a callback\n     *\n     * @private\n     * @param {ArrayBuffer} arraybuffer The array buffer to decode\n     * @param {function} callback The function to call on complete.\n     * @param {function} errback The function to call on error.\n     */\n    decodeArrayBuffer(arraybuffer, callback, errback) {\n        if (!this.offlineAc) {\n            this.offlineAc = this.getOfflineAudioContext(\n                this.ac && this.ac.sampleRate ? this.ac.sampleRate : 44100\n            );\n        }\n        if ('webkitAudioContext' in window) {\n            // Safari: no support for Promise-based decodeAudioData enabled\n            // Enable it in Safari using the Experimental Features > Modern WebAudio API option\n            this.offlineAc.decodeAudioData(\n                arraybuffer,\n                data => callback(data),\n                errback\n            );\n        } else {\n            this.offlineAc.decodeAudioData(arraybuffer).then(\n                (data) => callback(data)\n            ).catch(\n                (err) => errback(err)\n            );\n        }\n    }\n\n    /**\n     * Set pre-decoded peaks\n     *\n     * @param {number[]|Number.<Array[]>} peaks Peaks data\n     * @param {?number} duration Explicit duration\n     */\n    setPeaks(peaks, duration) {\n        if (duration != null) {\n            this.explicitDuration = duration;\n        }\n        this.peaks = peaks;\n    }\n\n    /**\n     * Set the rendered length (different from the length of the audio)\n     *\n     * @param {number} length The rendered length\n     */\n    setLength(length) {\n        // No resize, we can preserve the cached peaks.\n        if (this.mergedPeaks && length == 2 * this.mergedPeaks.length - 1 + 2) {\n            return;\n        }\n\n        this.splitPeaks = [];\n        this.mergedPeaks = [];\n        // Set the last element of the sparse array so the peak arrays are\n        // appropriately sized for other calculations.\n        const channels = this.buffer ? this.buffer.numberOfChannels : 1;\n        let c;\n        for (c = 0; c < channels; c++) {\n            this.splitPeaks[c] = [];\n            this.splitPeaks[c][2 * (length - 1)] = 0;\n            this.splitPeaks[c][2 * (length - 1) + 1] = 0;\n        }\n        this.mergedPeaks[2 * (length - 1)] = 0;\n        this.mergedPeaks[2 * (length - 1) + 1] = 0;\n    }\n\n    /**\n     * Compute the max and min value of the waveform when broken into <length> subranges.\n     *\n     * @param {number} length How many subranges to break the waveform into.\n     * @param {number} first First sample in the required range.\n     * @param {number} last Last sample in the required range.\n     * @return {number[]|Number.<Array[]>} Array of 2*<length> peaks or array of arrays of\n     * peaks consisting of (max, min) values for each subrange.\n     */\n    getPeaks(length, first, last) {\n        if (this.peaks) {\n            return this.peaks;\n        }\n        if (!this.buffer) {\n            return [];\n        }\n\n        first = first || 0;\n        last = last || length - 1;\n\n        this.setLength(length);\n\n        if (!this.buffer) {\n            return this.params.splitChannels\n                ? this.splitPeaks\n                : this.mergedPeaks;\n        }\n\n        /**\n         * The following snippet fixes a buffering data issue on the Safari\n         * browser which returned undefined It creates the missing buffer based\n         * on 1 channel, 4096 samples and the sampleRate from the current\n         * webaudio context 4096 samples seemed to be the best fit for rendering\n         * will review this code once a stable version of Safari TP is out\n         */\n        if (!this.buffer.length) {\n            const newBuffer = this.createBuffer(1, 4096, this.sampleRate);\n            this.buffer = newBuffer.buffer;\n        }\n\n        const sampleSize = this.buffer.length / length;\n        const sampleStep = ~~(sampleSize / 10) || 1;\n        const channels = this.buffer.numberOfChannels;\n        let c;\n\n        for (c = 0; c < channels; c++) {\n            const peaks = this.splitPeaks[c];\n            const chan = this.buffer.getChannelData(c);\n            let i;\n\n            for (i = first; i <= last; i++) {\n                const start = ~~(i * sampleSize);\n                const end = ~~(start + sampleSize);\n                /**\n                 * Initialize the max and min to the first sample of this\n                 * subrange, so that even if the samples are entirely\n                 * on one side of zero, we still return the true max and\n                 * min values in the subrange.\n                 */\n                let min = chan[start];\n                let max = min;\n                let j;\n\n                for (j = start; j < end; j += sampleStep) {\n                    const value = chan[j];\n\n                    if (value > max) {\n                        max = value;\n                    }\n\n                    if (value < min) {\n                        min = value;\n                    }\n                }\n\n                peaks[2 * i] = max;\n                peaks[2 * i + 1] = min;\n\n                if (c == 0 || max > this.mergedPeaks[2 * i]) {\n                    this.mergedPeaks[2 * i] = max;\n                }\n\n                if (c == 0 || min < this.mergedPeaks[2 * i + 1]) {\n                    this.mergedPeaks[2 * i + 1] = min;\n                }\n            }\n        }\n\n        return this.params.splitChannels ? this.splitPeaks : this.mergedPeaks;\n    }\n\n    /**\n     * Get the position from 0 to 1\n     *\n     * @return {number} Position\n     */\n    getPlayedPercents() {\n        return this.state.getPlayedPercents.call(this);\n    }\n\n    /** @private */\n    disconnectSource() {\n        if (this.source) {\n            this.source.disconnect();\n        }\n    }\n    /**\n     * Destroy all references with WebAudio, disconnecting audio nodes and closing Audio Context\n     */\n    destroyWebAudio() {\n        this.disconnectFilters();\n        this.disconnectSource();\n        this.gainNode.disconnect();\n        this.scriptNode.disconnect();\n        this.analyser.disconnect();\n\n        // close the audioContext if closeAudioContext option is set to true\n        if (this.params.closeAudioContext) {\n            // check if browser supports AudioContext.close()\n            if (\n                typeof this.ac.close === 'function' &&\n                this.ac.state != 'closed'\n            ) {\n                this.ac.close();\n            }\n            // clear the reference to the audiocontext\n            this.ac = null;\n            // clear the actual audiocontext, either passed as param or the\n            // global singleton\n            if (!this.params.audioContext) {\n                window.WaveSurferAudioContext = null;\n            } else {\n                this.params.audioContext = null;\n            }\n            // clear the offlineAudioContext\n            window.WaveSurferOfflineAudioContext = null;\n        }\n    }\n    /**\n     * This is called when wavesurfer is destroyed\n     */\n    destroy() {\n        if (!this.isPaused()) {\n            this.pause();\n        }\n        this.unAll();\n        this.buffer = null;\n        this.destroyed = true;\n\n        this.destroyWebAudio();\n    }\n\n    /**\n     * Loaded a decoded audio buffer\n     *\n     * @param {Object} buffer Decoded audio buffer to load\n     */\n    load(buffer) {\n        this.startPosition = 0;\n        this.lastPlay = this.ac.currentTime;\n        this.buffer = buffer;\n        this.createSource();\n    }\n\n    /** @private */\n    createSource() {\n        this.disconnectSource();\n        this.source = this.ac.createBufferSource();\n\n        // adjust for old browsers\n        this.source.start = this.source.start || this.source.noteGrainOn;\n        this.source.stop = this.source.stop || this.source.noteOff;\n\n        this.setPlaybackRate(this.playbackRate);\n        this.source.buffer = this.buffer;\n        this.source.connect(this.analyser);\n    }\n\n    /**\n     * @private\n     *\n     * some browsers require an explicit call to #resume before they will play back audio\n     */\n    resumeAudioContext() {\n        if (this.ac.state == 'suspended') {\n            this.ac.resume && this.ac.resume();\n        }\n    }\n\n    /**\n     * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\n     *\n     * @return {boolean} Whether or not this backend is currently paused\n     */\n    isPaused() {\n        return this.state !== this.states[PLAYING];\n    }\n\n    /**\n     * Used by `wavesurfer.getDuration()`\n     *\n     * @return {number} Duration of loaded buffer\n     */\n    getDuration() {\n        if (this.explicitDuration) {\n            return this.explicitDuration;\n        }\n        if (!this.buffer) {\n            return 0;\n        }\n        return this.buffer.duration;\n    }\n\n    /**\n     * Used by `wavesurfer.seekTo()`\n     *\n     * @param {number} start Position to start at in seconds\n     * @param {number} end Position to end at in seconds\n     * @return {{start: number, end: number}} Object containing start and end\n     * positions\n     */\n    seekTo(start, end) {\n        if (!this.buffer) {\n            return;\n        }\n\n        this.scheduledPause = null;\n\n        if (start == null) {\n            start = this.getCurrentTime();\n            if (start >= this.getDuration()) {\n                start = 0;\n            }\n        }\n        if (end == null) {\n            end = this.getDuration();\n        }\n\n        this.startPosition = start;\n        this.lastPlay = this.ac.currentTime;\n\n        if (this.state === this.states[FINISHED]) {\n            this.setState(PAUSED);\n        }\n\n        return {\n            start: start,\n            end: end\n        };\n    }\n\n    /**\n     * Get the playback position in seconds\n     *\n     * @return {number} The playback position in seconds\n     */\n    getPlayedTime() {\n        return (this.ac.currentTime - this.lastPlay) * this.playbackRate;\n    }\n\n    /**\n     * Plays the loaded audio region.\n     *\n     * @param {number} start Start offset in seconds, relative to the beginning\n     * of a clip.\n     * @param {number} end When to stop relative to the beginning of a clip.\n     */\n    play(start, end) {\n        if (!this.buffer) {\n            return;\n        }\n\n        // need to re-create source on each playback\n        this.createSource();\n\n        const adjustedTime = this.seekTo(start, end);\n\n        start = adjustedTime.start;\n        end = adjustedTime.end;\n\n        this.scheduledPause = end;\n\n        this.source.start(0, start);\n\n        this.resumeAudioContext();\n\n        this.setState(PLAYING);\n\n        this.fireEvent('play');\n    }\n\n    /**\n     * Pauses the loaded audio.\n     */\n    pause() {\n        this.scheduledPause = null;\n\n        this.startPosition += this.getPlayedTime();\n        try {\n            this.source && this.source.stop(0);\n        } catch (err) {\n            // Calling stop can throw the following 2 errors:\n            // - RangeError (The value specified for when is negative.)\n            // - InvalidStateNode (The node has not been started by calling start().)\n            // We can safely ignore both errors, because:\n            // - The range is surely correct\n            // - The node might not have been started yet, in which case we just want to carry on without causing any trouble.\n        }\n\n        this.setState(PAUSED);\n\n        this.fireEvent('pause');\n    }\n\n    /**\n     * Returns the current time in seconds relative to the audio-clip's\n     * duration.\n     *\n     * @return {number} The current time in seconds\n     */\n    getCurrentTime() {\n        return this.state.getCurrentTime.call(this);\n    }\n\n    /**\n     * Returns the current playback rate. (0=no playback, 1=normal playback)\n     *\n     * @return {number} The current playback rate\n     */\n    getPlaybackRate() {\n        return this.playbackRate;\n    }\n\n    /**\n     * Set the audio source playback rate.\n     *\n     * @param {number} value The playback rate to use\n     */\n    setPlaybackRate(value) {\n        this.playbackRate = value || 1;\n        this.source && this.source.playbackRate.setValueAtTime(\n            this.playbackRate,\n            this.ac.currentTime\n        );\n    }\n\n    /**\n     * Set a point in seconds for playback to stop at.\n     *\n     * @param {number} end Position to end at\n     * @version 3.3.0\n     */\n    setPlayEnd(end) {\n        this.scheduledPause = end;\n    }\n}\n","/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing. The function also has a property 'clear' \n * that is a function which will clear the timer to prevent previously scheduled executions. \n *\n * @source underscore.js\n * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/\n * @param {Function} function to wrap\n * @param {Number} timeout in ms (`100`)\n * @param {Boolean} whether to execute at the beginning (`false`)\n * @api public\n */\nfunction debounce(func, wait, immediate){\n  var timeout, args, context, timestamp, result;\n  if (null == wait) wait = 100;\n\n  function later() {\n    var last = Date.now() - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      if (!immediate) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n    }\n  };\n\n  var debounced = function(){\n    context = this;\n    args = arguments;\n    timestamp = Date.now();\n    var callNow = immediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n\n  debounced.clear = function() {\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n  \n  debounced.flush = function() {\n    if (timeout) {\n      result = func.apply(context, args);\n      context = args = null;\n      \n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n\n  return debounced;\n};\n\n// Adds compatibility for ES modules\ndebounce.debounce = debounce;\n\nmodule.exports = debounce;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/wavesurfer.js\");\n","\n/**\n * @typedef {Object} MarkerParams\n * @desc The parameters used to describe a marker.\n * @example wavesurfer.addMarker(regionParams);\n * @property {number} time The time to set the marker at\n * @property {?label} string An optional marker label\n * @property {?color} string Background color for marker\n * @property {?position} string \"top\" or \"bottom\", defaults to \"bottom\"\n * @property {?markerElement} element An HTML element to display instead of the default marker image\n */\n\n\n/**\n * Markers are points in time in the audio that can be jumped to.\n *\n * @implements {PluginClass}\n *\n * @example\n * import MarkersPlugin from 'wavesurfer.markers.js';\n *\n * // if you are using <script> tags\n * var MarkerPlugin = window.WaveSurfer.markers;\n *\n * // ... initialising wavesurfer with the plugin\n * var wavesurfer = WaveSurfer.create({\n *   // wavesurfer options ...\n *   plugins: [\n *     MarkersPlugin.create({\n *       // plugin options ...\n *     })\n *   ]\n * });\n */\n\nconst DEFAULT_FILL_COLOR = \"#D8D8D8\";\nconst DEFAULT_POSITION = \"bottom\";\n\nexport default class MarkersPlugin {\n    /**\n     * @typedef {Object} MarkersPluginParams\n     * @property {?MarkerParams[]} markers Initial set of markers\n     * @fires MarkersPlugin#marker-click\n     */\n\n    /**\n     * Markers plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * @param {MarkersPluginParams} params parameters use to initialise the plugin\n     * @since 4.6.0\n     * @return {PluginDefinition} an object representing the plugin\n     */\n    static create(params) {\n        return {\n            name: 'markers',\n            deferInit: params && params.deferInit ? params.deferInit : false,\n            params: params,\n            staticProps: {\n                addMarker(options) {\n                    if (!this.initialisedPluginList.markers) {\n                        this.initPlugin('markers');\n                    }\n                    return this.markers.add(options);\n                },\n                clearMarkers() {\n                    this.markers && this.markers.clear();\n                }\n            },\n            instance: MarkersPlugin\n        };\n    }\n\n    constructor(params, ws) {\n        this.params = params;\n        this.wavesurfer = ws;\n        this.util = ws.util;\n        this.style = this.util.style;\n        this.markerWidth = 11;\n        this.markerHeight = 22;\n\n\n        this._onResize = () => {\n            this._updateMarkerPositions();\n        };\n\n        this._onBackendCreated = () => {\n            this.wrapper = this.wavesurfer.drawer.wrapper;\n            if (this.params.markers) {\n                this.params.markers.forEach(marker => this.add(marker));\n            }\n            window.addEventListener('resize', this._onResize, true);\n            window.addEventListener('orientationchange', this._onResize, true);\n            this.wavesurfer.on('zoom', this._onResize);\n        };\n\n        this.markers = [];\n        this._onReady = () => {\n            this.wrapper = this.wavesurfer.drawer.wrapper;\n            this._updateMarkerPositions();\n        };\n    }\n\n    init() {\n        // Check if ws is ready\n        if (this.wavesurfer.isReady) {\n            this._onBackendCreated();\n            this._onReady();\n        } else {\n            this.wavesurfer.once('ready', this._onReady);\n            this.wavesurfer.once('backend-created', this._onBackendCreated);\n        }\n    }\n\n    destroy() {\n        this.wavesurfer.un('ready', this._onReady);\n        this.wavesurfer.un('backend-created', this._onBackendCreated);\n\n        this.wavesurfer.un('zoom', this._onResize);\n\n        window.removeEventListener('resize', this._onResize, true);\n        window.removeEventListener('orientationchange', this._onResize, true);\n\n        this.clear();\n    }\n\n    /**\n     * Add a marker\n     *\n     * @param {MarkerParams} params Marker definition\n     * @return {object} The created marker\n     */\n    add(params) {\n        let marker = {\n            time: params.time,\n            label: params.label,\n            color: params.color || DEFAULT_FILL_COLOR,\n            position: params.position || DEFAULT_POSITION\n        };\n\n        if (params.markerElement) {\n            this.markerWidth = params.markerElement.width;\n            this.markerHeight = params.markerElement.height;\n        }\n\n        marker.el = this._createMarkerElement(marker, params.markerElement);\n\n        this.wrapper.appendChild(marker.el);\n        this.markers.push(marker);\n        this._updateMarkerPositions();\n\n        return marker;\n    }\n\n    /**\n     * Remove a marker\n     *\n     * @param {number} index Index of the marker to remove\n     */\n    remove(index) {\n        let marker = this.markers[index];\n        if (!marker) {\n            return;\n        }\n\n        this.wrapper.removeChild(marker.el);\n        this.markers.splice(index, 1);\n    }\n\n    _createPointerSVG(color, position) {\n        const svgNS = \"http://www.w3.org/2000/svg\";\n\n        const el = document.createElementNS(svgNS, \"svg\");\n        const polygon = document.createElementNS(svgNS, \"polygon\");\n\n        el.setAttribute(\"viewBox\", \"0 0 40 80\");\n\n        polygon.setAttribute(\"id\", \"polygon\");\n        polygon.setAttribute(\"stroke\", \"#979797\");\n        polygon.setAttribute(\"fill\", color);\n        polygon.setAttribute(\"points\", \"20 0 40 30 40 80 0 80 0 30\");\n        if ( position == \"top\" ) {\n            polygon.setAttribute(\"transform\", \"rotate(180, 20 40)\");\n        }\n\n        el.appendChild(polygon);\n\n        this.style(el, {\n            width: this.markerWidth + \"px\",\n            height: this.markerHeight + \"px\",\n            \"min-width\": this.markerWidth + \"px\",\n            \"margin-right\": \"5px\",\n            \"z-index\": 4\n        });\n        return el;\n    }\n\n    _createMarkerElement(marker, markerElement) {\n        let label = marker.label;\n        let time = marker.time;\n\n        const el = document.createElement('marker');\n        el.className = \"wavesurfer-marker\";\n\n        this.style(el, {\n            position: \"absolute\",\n            height: \"100%\",\n            display: \"flex\",\n            overflow: \"hidden\",\n            \"flex-direction\": (marker.position == \"top\" ? \"column-reverse\" : \"column\")\n        });\n\n        const line = document.createElement('div');\n        this.style(line, {\n            \"flex-grow\": 1,\n            \"margin-left\": (this.markerWidth / 2 - 0.5) + \"px\",\n            background: \"black\",\n            width: \"1px\",\n            opacity: 0.1\n        });\n        el.appendChild(line);\n\n        const labelDiv = document.createElement('div');\n        const point = markerElement || this._createPointerSVG(marker.color, marker.position);\n        labelDiv.appendChild(point);\n\n        if ( label ) {\n            const labelEl = document.createElement('span');\n            labelEl.innerText = label;\n            this.style(labelEl, {\n                \"font-family\": \"monospace\",\n                \"font-size\": \"90%\"\n            });\n            labelDiv.appendChild(labelEl);\n        }\n\n        this.style(labelDiv, {\n            display: \"flex\",\n            \"align-items\": \"center\",\n            cursor: \"pointer\"\n        });\n\n        el.appendChild(labelDiv);\n\n        labelDiv.addEventListener(\"click\", e => {\n            e.stopPropagation();\n            this.wavesurfer.setCurrentTime(time);\n            this.wavesurfer.fireEvent(\"marker-click\", marker, e);\n        });\n\n        return el;\n    }\n\n    _updateMarkerPositions() {\n        const duration = this.wavesurfer.getDuration();\n\n        for ( let i = 0 ; i < this.markers.length; i++ ) {\n            let marker = this.markers[i];\n            const elementWidth =\n                this.wavesurfer.drawer.width /\n                this.wavesurfer.params.pixelRatio;\n\n            const positionPct = Math.min(marker.time / duration, 1);\n            const leftPx = ((elementWidth * positionPct) - (this.markerWidth / 2));\n            this.style(marker.el, {\n                \"left\":  leftPx + \"px\",\n                \"max-width\": (elementWidth - leftPx) + \"px\"\n            });\n        }\n    }\n\n    /**\n     * Remove all markers\n     */\n    clear() {\n        while ( this.markers.length > 0 ) {\n            this.remove(0);\n        }\n    }\n}\n","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"lxpIW\")).toString();","/* import WaveformData from 'waveform-data' */\nimport WaveSurfer from \"wavesurfer.js\"\nimport MarkersPlugin from \"wavesurfer.js/src/plugin/markers\";\n\nconst w = new URL('../assets/walksign.wav',import.meta.url)\nconst playButton = document.querySelector(\"#play\")\nconst pauseButton = document.querySelector(\"#pause\")\n\nvar wavesurfer = WaveSurfer.create({\n    container: '#waveform',\n    waveColor: 'violet',\n    progressColor: 'purple',\n    plugins: [\n        MarkersPlugin.create({\n            markers: [\n                {\n                    time: .5,\n                    label: \"V1\",\n                    color: '#ff990a'\n                },\n                {\n                    time: 1,\n                    label: \"V2\",\n                    color: '#00ffcc',\n                    position: 'top'\n                }\n            ]\n        })\n]    \n});\n\nwavesurfer.load(w.href);\n\nconst play = () => {\n    console.log(\"play\")\n    if(wavesurfer.isPlaying) {\n        wavesurfer.seekTo(0)\n    }\n    wavesurfer.play()\n}\nplayButton.addEventListener('click',play)\n\nconst createMarkers = () => {\n    console.log(wavesurfer)\n}\nwavesurfer.on('ready',createMarkers())\n\n/* \nfetch(w.href)\n    .then(r => r.arrayBuffer())\n    .then(f => {\n        console.log(f)\n        var wavesurfer = WaveformData.create(f);\n    })\n */\n//console.log(f)\n/* const loadFile = async (url) => {\n    const response = await fetch(url)\n    return response.blob()\n}\n try {\n    const f = await loadFile(w.href);\n    var wavesurfer = WaveformData.create(f);\n} catch(err) {\n    throw new Error(err)\n}  */"],"names":["$7df9296036801708$export$6503ec6e8aabbaf","$7df9296036801708$export$f7ad0328861e2f03","$7df9296036801708$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","root","factory","self","_style","_interopRequireDefault","__webpack_require__","_getId","CanvasEntry","_classCallCheck","this","wave","waveCtx","progress","progressCtx","start","end","default","constructor","name","toLowerCase","canvasContextAttributes","value","element","getContext","elementWidth","totalWidth","width","height","offsetLeft","elementSize","hasProgressCanvas","clearRect","canvas","waveColor","progressColor","fillStyle","vertical","setTransform","x","y","radius","fillRectToContext","ctx","drawRoundedRect","fillRect","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","fill","peaks","absmax","halfH","offsetY","drawLineToContext","peak","h","first","Math","round","canvasStart","canvasEnd","scale","halfOffset","absmaxHalf","halfPixel","j","format","quality","type","_this","Promise","resolve","toBlob","toDataURL","util","_interopRequireWildcard","Drawer","container","params","_super","call","withOrientation","pixelRatio","lastPos","wrapper","el","styles","style","appendChild","document","createElement","display","position","userSelect","webkitUserSelect","fillParent","scrollParent","overflowX","hideScrollbar","overflowY","setupWrapperEvents","e","noPrevent","preventDefault","clientX","targetTouches","bbox","getBoundingClientRect","nominalWidth","parentWidth","getWidth","progressPixels","getProgressPixels","scrollLeft","scrollWidth","clamp","wrapperBbox","rtl","right","left","_this2","addEventListener","orientedEvent","scrollbarHeight","offsetHeight","clientHeight","clientY","bottom","interact","fireEvent","handleEvent","setWidth","clearWave","barWidth","drawBars","drawWave","percent","recenterOnPosition","immediate","half","clientWidth","maxScroll","target","offset","rate","autoCenterRate","max","min","newWidth","updateSize","minPxDelta","pos","autoCenter","newPos","autoCenterImmediately","updateProgress","unAll","parentNode","domElement","removeChild","channelIndex","Observer","_drawer","_drawer2","MultiCanvas","maxCanvasWidth","maxCanvasElementWidth","canvases","progressWave","EntryClass","drawingContextAttributes","overlap","ceil","barRadius","createWrapper","createElements","zIndex","top","overflow","boxSizing","borderRightStyle","pointerEvents","addCanvas","updateCursor","borderRightWidth","cursorWidth","borderRightColor","cursorColor","requiredCanvases","removeCanvas","canvasWidth","lastCanvas","forEach","entry","updateDimensions","leftOffset","initWave","initProgress","push","lastEntry","parentElement","destroy","pop","_this3","frame","_this4","prepareDraw","_ref","hasMinVals","ch","undefined","peakIndexScale","bar","step","barGap","last","floor","barMinHeight","_this5","_ref2","reflectedPeaks","len","drawLine","_this6","_ref3","splitChannelsOptions","channelColors","setFillStyles","applyCanvasTransforms","drawLines","startCanvas","endCanvas","intersection","x1","y1","x2","y2","_ref4","fillRects","splitChannels","filterChannels","includes","fn","drawIndex","normalizedMax","_this7","Array","channels","overallAbsMax","filteredChannels","filter","c","hideChannel","overlay","setHeight","relativeNormalization","map","channelPeaks","absMax","indexOf","barHeight","normalize","some","val","arguments","all","getImage","images","MediaElementWebAudio","sourceMediaElement","setPlaybackRate","audioRate","createTimer","createVolumeNode","createScriptNode","createAnalyserNode","media","preload","_get","_getPrototypeOf","prototype","createMediaElementSource","mediaElement","ac","connect","analyser","resumeAudioContext","destroyWebAudio","MediaElement","_webaudio","currentTime","duration","paused","playbackRate","play","pause","volume","mediaType","elementPosition","isMuted","buffer","onPlayEnd","mediaListeners","error","canplay","ended","seeked","event","volumechange","muted","removeEventListener","on","onAudioProcess","isPaused","getCurrentTime","url","controls","mediaControls","autoplay","src","prevMedia","querySelector","_load","elt","HTMLMediaElement","load","_setupMediaListeners","setVolume","explicitDuration","Infinity","seekable","getDuration","clearPlayEnd","seekTo","promise","setPlayEnd","_onPlayEnd","time","un","deviceId","setSinkId","reject","destroyed","removeMediaElementOnDestroy","WebAudio","PeakCache","clearPeakCache","peakCacheRanges","peakCacheLength","uncachedRanges","item","arr","concat","sort","a","b","uncachedRangePairs","peakCacheRangePairs","_max","_min","options","requestHeaders","fetchHeaders","append","header","key","instance","_observer","Headers","responseType","fetchOptions","AbortController","method","headers","mode","redirect","referrer","signal","controller","fetch","fetchRequest","credentials","response","progressAvailable","then","contentLength","body","get","onProgress","Response","json","ProgressHandler1","errMsg","ok","blob","text","status","read","_reader","loaded","done","total","lengthComputable","byteLength","catch","enqueue","exports","func","defineProperty","enumerable","_silenceMode","_absMax","_requestAnimationFrame","handlers","fn1","callback","splice","handler","_len","args","_key","eventNames","_disabledEventEmissions","_isDisabledEventEmission","module","prop","Proxy","obj","receiver","isProxy","set","mapProp","bind","offsetTop","offsetWidth","preventClick","values","preventClickHandler","setTimeout","audioSilentMode","remove","tmp","children","disableRemotePlayback","obj5","_createClass","Constructor","protoProps","staticProps","defaultParams","audioContext","audioScriptProcessor","backend","backgroundColor","dragSelection","desynchronized","ignoreSilenceMode","loopSelection","mediaContainer","minPxPerSec","partialRender","window","plugins","renderer","responsive","devicePixelRatio","screen","deviceXDPI","logicalXDPI","skipLength","xhr","backends","assign","transform","setBackgroundColor","arraybuffer","drawer","peakCache","isDestroyed","supportsWebAudio","prevWidth","_onResize","debounce","createBackend","createPeakCache","plugin","addPlugin","initialisedPluginList","pluginStaticProp","observerPrototypeKeys","getOwnPropertyNames","Instance","destroyPlugin","drawBuffer","getPlayedPercents","Backend","init","getVolume","newVolume","_peakcache","seconds","skip","recenter","isWebAudioBackend","isFinite","oldScrollParent","_this8","getPlaybackRate","mute","setMute","savedVolume","filters","color","background","channelIndices","newRanges","addRangeToPeakCache","getPeaks","drawPeaks","pxPerSec","decodeArrayBuffer","data","_this9","loadDecodedBuffer","isReady","reader","_this10","empty","loadArrayBuffer","result","preloadIgnoreReasons","activeReasons","console","reason","warn","join","loadMediaElement","action","tmpEvents","_this11","once","getArrayBuffer","urlOrElt","_this12","err","forceDecode","_this13","request","_this14","currentRequest","fetchFile","percentComplete","accuracy","noWindow","stringify","createObjectURL","URL","revokeObjectURL","Blob","objURL","abort","cancelAjax","destroyAllPlugins","clearTmpEvents","VERSION","WaveSurfer","PLAYING","o12","PAUSED","setPrototypeOf","getPrototypeOf","o","FINISHED","__proto__","WebAudio1","_util$Observer","_createSuper","_this$stateBehaviors","_this$states","addOnAudioProcess","removeOnAudioProcess","startPosition","getPlayedTime","_defineProperty","getAudioContext","lastPlay","mergedPeaks","offlineAc","create","stateBehaviors","gainNode","splitPeaks","state","scriptNode","source","WaveSurferAudioContext","webkitAudioContext","WaveSurferOfflineAudioContext","AudioContext","OfflineAudioContext","sampleRate","webkitOfflineAudioContext","setState","setLength","states","disconnectFilters","curr","createScriptProcessor","scriptBufferSize","createJavaScriptNode","onaudioprocess","destination","scheduledPause","createAnalyser","createGain","audio","srcObject","stream","gain","setValueAtTime","decodeAudioData","errback","getOfflineAudioContext","numberOfChannels","newBuffer","sampleSize","sampleStep","disconnectSource","disconnect","close","resume","adjustedTime","stop","wait","context","timestamp","Date","now","timeout","later","apply","callNow","clear","clearTimeout","debounced","flush","__webpack_module_cache__","__webpack_require__1","moduleId","cachedModule","__webpack_modules__","$21cecdb644a71861$exports","define","amd","static","deferInit","addMarker","markers","initPlugin","add","clearMarkers","$fa5d695131336792$export$2e2bcd8739ae039","ws","wavesurfer","markerWidth","markerHeight","_updateMarkerPositions","_onBackendCreated","marker","_onReady","label","markerElement","_createMarkerElement","index","_createPointerSVG","svgNS","createElementNS","polygon","setAttribute","className","line","opacity","labelDiv","point","labelEl","innerText","cursor","stopPropagation","setCurrentTime","leftPx","$bac2ed0fd38559fc$exports","import","meta","toString","$6823df961dddd37e$var$w","$6823df961dddd37e$var$playButton","$6823df961dddd37e$var$wavesurfer","$parcel$interopDefault","href","log","isPlaying"],"version":3,"file":"index.7883efcf.js.map"}